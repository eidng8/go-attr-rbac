// @formatter:off
// package handlers provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package handlers

import (
	"time"

	openapi_types "github.com/oapi-codegen/runtime/types"
)

// AccessToken defines model for AccessToken.
type AccessToken struct {
	CreatedAt *time.Time `json:"created_at,omitempty"`
	Id        uint64     `json:"id"`
	Owner     *User      `json:"owner,omitempty"`
	UserId    uint64     `json:"user_id"`
}

// Permission defines model for Permission.
type Permission struct {
	CreatedAt   *time.Time `json:"created_at,omitempty"`
	Description *string    `json:"description,omitempty"`
	Id          uint32     `json:"id"`
	Name        string     `json:"name"`
	Roles       *[]Role    `json:"roles,omitempty"`
	UpdatedAt   *time.Time `json:"updated_at,omitempty"`
}

// PermissionCreate defines model for PermissionCreate.
type PermissionCreate struct {
	CreatedAt   *time.Time `json:"created_at,omitempty"`
	Description *string    `json:"description,omitempty"`
	Id          uint32     `json:"id"`
	Name        string     `json:"name"`
	UpdatedAt   *time.Time `json:"updated_at,omitempty"`
}

// PermissionList defines model for PermissionList.
type PermissionList struct {
	CreatedAt   *time.Time `json:"created_at,omitempty"`
	Description *string    `json:"description,omitempty"`
	Id          uint32     `json:"id"`
	Name        string     `json:"name"`
	UpdatedAt   *time.Time `json:"updated_at,omitempty"`
}

// PermissionRead defines model for PermissionRead.
type PermissionRead struct {
	CreatedAt   *time.Time `json:"created_at,omitempty"`
	Description *string    `json:"description,omitempty"`
	Id          uint32     `json:"id"`
	Name        string     `json:"name"`
	UpdatedAt   *time.Time `json:"updated_at,omitempty"`
}

// PermissionUpdate defines model for PermissionUpdate.
type PermissionUpdate struct {
	CreatedAt   *time.Time `json:"created_at,omitempty"`
	Description *string    `json:"description,omitempty"`
	Id          uint32     `json:"id"`
	Name        string     `json:"name"`
	UpdatedAt   *time.Time `json:"updated_at,omitempty"`
}

// PersonalToken defines model for PersonalToken.
type PersonalToken struct {
	CreatedAt   *time.Time `json:"created_at,omitempty"`
	Description string     `json:"description"`
	Id          uint64     `json:"id"`
	Owner       *User      `json:"owner,omitempty"`
	UserId      uint64     `json:"user_id"`
}

// PersonalTokenCreate defines model for PersonalTokenCreate.
type PersonalTokenCreate struct {
	CreatedAt   *time.Time `json:"created_at,omitempty"`
	Description string     `json:"description"`
	Id          uint64     `json:"id"`
	Token       string     `json:"token"`
	UserId      uint64     `json:"user_id"`
}

// PersonalTokenList defines model for PersonalTokenList.
type PersonalTokenList struct {
	CreatedAt   *time.Time `json:"created_at,omitempty"`
	Description string     `json:"description"`
	Id          uint64     `json:"id"`
	UserId      uint64     `json:"user_id"`
}

// PersonalTokenRead defines model for PersonalTokenRead.
type PersonalTokenRead struct {
	CreatedAt   *time.Time `json:"created_at,omitempty"`
	Description string     `json:"description"`
	Id          uint64     `json:"id"`
	UserId      uint64     `json:"user_id"`
}

// Role defines model for Role.
type Role struct {
	CreatedAt   *time.Time    `json:"created_at,omitempty"`
	Description *string       `json:"description,omitempty"`
	Id          uint32        `json:"id"`
	Name        string        `json:"name"`
	Permissions *[]Permission `json:"permissions,omitempty"`
	UpdatedAt   *time.Time    `json:"updated_at,omitempty"`
	Users       *[]User       `json:"users,omitempty"`
}

// RoleCreate defines model for RoleCreate.
type RoleCreate struct {
	CreatedAt   *time.Time `json:"created_at,omitempty"`
	Description *string    `json:"description,omitempty"`
	Id          uint32     `json:"id"`
	Name        string     `json:"name"`
	UpdatedAt   *time.Time `json:"updated_at,omitempty"`
}

// RoleList defines model for RoleList.
type RoleList struct {
	CreatedAt   *time.Time `json:"created_at,omitempty"`
	Description *string    `json:"description,omitempty"`
	Id          uint32     `json:"id"`
	Name        string     `json:"name"`
	UpdatedAt   *time.Time `json:"updated_at,omitempty"`
}

// RoleRead defines model for RoleRead.
type RoleRead struct {
	CreatedAt   *time.Time `json:"created_at,omitempty"`
	Description *string    `json:"description,omitempty"`
	Id          uint32     `json:"id"`
	Name        string     `json:"name"`
	UpdatedAt   *time.Time `json:"updated_at,omitempty"`
}

// RoleUpdate defines model for RoleUpdate.
type RoleUpdate struct {
	CreatedAt   *time.Time `json:"created_at,omitempty"`
	Description *string    `json:"description,omitempty"`
	Id          uint32     `json:"id"`
	Name        string     `json:"name"`
	UpdatedAt   *time.Time `json:"updated_at,omitempty"`
}

// RolePermissionsList defines model for Role_PermissionsList.
type RolePermissionsList struct {
	CreatedAt   *time.Time `json:"created_at,omitempty"`
	Description *string    `json:"description,omitempty"`
	Id          uint32     `json:"id"`
	Name        string     `json:"name"`
	UpdatedAt   *time.Time `json:"updated_at,omitempty"`
}

// RoleUsersList defines model for Role_UsersList.
type RoleUsersList struct {
	Attr *struct {
		Dept  uint32 `json:"dept"`
		Level uint8  `json:"level"`
	} `json:"attr,omitempty"`
	CreatedAt *time.Time           `json:"created_at,omitempty"`
	Email     *openapi_types.Email `json:"email,omitempty"`
	Id        uint64               `json:"id"`
	UpdatedAt *time.Time           `json:"updated_at,omitempty"`
	Username  string               `json:"username"`
}

// User defines model for User.
type User struct {
	AccessTokens *[]AccessToken `json:"access_tokens,omitempty"`
	Attr         *struct {
		Dept  uint32 `json:"dept"`
		Level uint8  `json:"level"`
	} `json:"attr,omitempty"`
	CreatedAt      *time.Time           `json:"created_at,omitempty"`
	Email          *openapi_types.Email `json:"email,omitempty"`
	Id             uint64               `json:"id"`
	PersonalTokens *[]PersonalToken     `json:"personal_tokens,omitempty"`
	RefreshTokens  *[]AccessToken       `json:"refresh_tokens,omitempty"`
	Roles          *[]Role              `json:"roles,omitempty"`
	UpdatedAt      *time.Time           `json:"updated_at,omitempty"`
	Username       string               `json:"username"`
}

// UserCreate defines model for UserCreate.
type UserCreate struct {
	Attr *struct {
		Dept  uint32 `json:"dept"`
		Level uint8  `json:"level"`
	} `json:"attr,omitempty"`
	CreatedAt *time.Time           `json:"created_at,omitempty"`
	Email     *openapi_types.Email `json:"email,omitempty"`
	Id        uint64               `json:"id"`
	UpdatedAt *time.Time           `json:"updated_at,omitempty"`
	Username  string               `json:"username"`
}

// UserList defines model for UserList.
type UserList struct {
	Attr *struct {
		Dept  uint32 `json:"dept"`
		Level uint8  `json:"level"`
	} `json:"attr,omitempty"`
	CreatedAt *time.Time           `json:"created_at,omitempty"`
	Email     *openapi_types.Email `json:"email,omitempty"`
	Id        uint64               `json:"id"`
	UpdatedAt *time.Time           `json:"updated_at,omitempty"`
	Username  string               `json:"username"`
}

// UserRead defines model for UserRead.
type UserRead struct {
	Attr *struct {
		Dept  uint32 `json:"dept"`
		Level uint8  `json:"level"`
	} `json:"attr,omitempty"`
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// DeletedAt Date and time when the record was deleted
	DeletedAt *time.Time           `json:"deleted_at"`
	Email     *openapi_types.Email `json:"email,omitempty"`
	Id        uint64               `json:"id"`
	UpdatedAt *time.Time           `json:"updated_at,omitempty"`
	Username  string               `json:"username"`
}

// UserUpdate defines model for UserUpdate.
type UserUpdate struct {
	Attr *struct {
		Dept  uint32 `json:"dept"`
		Level uint8  `json:"level"`
	} `json:"attr,omitempty"`
	CreatedAt *time.Time           `json:"created_at,omitempty"`
	Email     *openapi_types.Email `json:"email,omitempty"`
	Id        uint64               `json:"id"`
	UpdatedAt *time.Time           `json:"updated_at,omitempty"`
	Username  string               `json:"username"`
}

// UserRolesList defines model for User_RolesList.
type UserRolesList struct {
	CreatedAt   *time.Time `json:"created_at,omitempty"`
	Description *string    `json:"description,omitempty"`
	Id          uint32     `json:"id"`
	Name        string     `json:"name"`
	UpdatedAt   *time.Time `json:"updated_at,omitempty"`
}

// N400 defines model for 400.
type N400 struct {
	Code   int          `json:"code"`
	Errors *interface{} `json:"errors,omitempty"`
	Status string       `json:"status"`
}

// N401 defines model for 401.
type N401 struct {
	Code   int          `json:"code"`
	Errors *interface{} `json:"errors,omitempty"`
	Status string       `json:"status"`
}

// N403 defines model for 403.
type N403 struct {
	Code   int          `json:"code"`
	Errors *interface{} `json:"errors,omitempty"`
	Status string       `json:"status"`
}

// N404 defines model for 404.
type N404 struct {
	Code   int          `json:"code"`
	Errors *interface{} `json:"errors,omitempty"`
	Status string       `json:"status"`
}

// N409 defines model for 409.
type N409 struct {
	Code   int          `json:"code"`
	Errors *interface{} `json:"errors,omitempty"`
	Status string       `json:"status"`
}

// N422 defines model for 422.
type N422 struct {
	Code   int          `json:"code"`
	Errors *interface{} `json:"errors,omitempty"`
	Status string       `json:"status"`
}

// N500 defines model for 500.
type N500 struct {
	Code   int          `json:"code"`
	Errors *interface{} `json:"errors,omitempty"`
	Status string       `json:"status"`
}

// LoginJSONBody defines parameters for Login.
type LoginJSONBody struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

// ReadPermissionParams defines parameters for ReadPermission.
type ReadPermissionParams struct {
	// Username Username of the user
	Username *string `form:"username,omitempty" json:"username,omitempty"`
}

// UpdatePermissionJSONBody defines parameters for UpdatePermission.
type UpdatePermissionJSONBody struct {
	Description *string   `json:"description,omitempty"`
	Name        *string   `json:"name,omitempty"`
	Roles       *[]uint32 `json:"roles,omitempty"`
}

// ListPermissionParams defines parameters for ListPermission.
type ListPermissionParams struct {
	// Page what page to render
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PerPage item count to render per page
	PerPage *int `form:"per_page,omitempty" json:"per_page,omitempty"`

	// Name Name of the permission
	Name *string `form:"name,omitempty" json:"name,omitempty"`
}

// CreatePermissionJSONBody defines parameters for CreatePermission.
type CreatePermissionJSONBody struct {
	Description *string   `json:"description,omitempty"`
	Name        string    `json:"name"`
	Roles       *[]uint32 `json:"roles,omitempty"`
}

// ListPersonalTokenParams defines parameters for ListPersonalToken.
type ListPersonalTokenParams struct {
	// Page what page to render
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PerPage item count to render per page
	PerPage *int `form:"per_page,omitempty" json:"per_page,omitempty"`
}

// CreatePersonalTokenJSONBody defines parameters for CreatePersonalToken.
type CreatePersonalTokenJSONBody struct {
	Description string   `json:"description"`
	Scopes      []string `json:"scopes"`

	// Ttl Time to live in seconds
	Ttl uint32 `json:"ttl"`
}

// HintPermissionsParams defines parameters for HintPermissions.
type HintPermissionsParams struct {
	// Q text to search
	Q string `form:"q" json:"q"`
}

// HintRolesParams defines parameters for HintRoles.
type HintRolesParams struct {
	// Q text to search
	Q string `form:"q" json:"q"`
}

// HintUsersParams defines parameters for HintUsers.
type HintUsersParams struct {
	// Q text to search
	Q string `form:"q" json:"q"`
}

// UpdateRoleJSONBody defines parameters for UpdateRole.
type UpdateRoleJSONBody struct {
	Description *string   `json:"description,omitempty"`
	Name        *string   `json:"name,omitempty"`
	Permissions *[]uint32 `json:"permissions,omitempty"`
	Users       *[]uint64 `json:"users,omitempty"`
}

// ListRolePermissionsParams defines parameters for ListRolePermissions.
type ListRolePermissionsParams struct {
	// Page what page to render
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PerPage item count to render per page
	PerPage *int `form:"per_page,omitempty" json:"per_page,omitempty"`
}

// AssignPermissionsJSONBody defines parameters for AssignPermissions.
type AssignPermissionsJSONBody = []uint32

// ListRoleUsersParams defines parameters for ListRoleUsers.
type ListRoleUsersParams struct {
	// Page what page to render
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PerPage item count to render per page
	PerPage *int `form:"per_page,omitempty" json:"per_page,omitempty"`
}

// ListRoleParams defines parameters for ListRole.
type ListRoleParams struct {
	// Page what page to render
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PerPage item count to render per page
	PerPage *int `form:"per_page,omitempty" json:"per_page,omitempty"`

	// Name Name of the role
	Name *string `form:"name,omitempty" json:"name,omitempty"`
}

// CreateRoleJSONBody defines parameters for CreateRole.
type CreateRoleJSONBody struct {
	Description *string   `json:"description,omitempty"`
	Name        string    `json:"name"`
	Permissions *[]uint32 `json:"permissions,omitempty"`
	Users       *[]uint64 `json:"users,omitempty"`
}

// DeleteUserParams defines parameters for DeleteUser.
type DeleteUserParams struct {
	// Trashed Whether to include trashed items
	Trashed *bool `form:"trashed,omitempty" json:"trashed,omitempty"`
}

// ReadUserParams defines parameters for ReadUser.
type ReadUserParams struct {
	// Trashed Whether to include trashed items
	Trashed *bool `form:"trashed,omitempty" json:"trashed,omitempty"`
}

// UpdateUserJSONBody defines parameters for UpdateUser.
type UpdateUserJSONBody struct {
	Attr *struct {
		Dept  uint32 `json:"dept"`
		Level uint8  `json:"level"`
	} `json:"attr,omitempty"`
	Email *openapi_types.Email `json:"email,omitempty"`
	Roles *[]uint32            `json:"roles,omitempty"`
}

// ListUserRolesParams defines parameters for ListUserRoles.
type ListUserRolesParams struct {
	// Page what page to render
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PerPage item count to render per page
	PerPage *int `form:"per_page,omitempty" json:"per_page,omitempty"`
}

// AssignRolesJSONBody defines parameters for AssignRoles.
type AssignRolesJSONBody = []uint32

// ListUserParams defines parameters for ListUser.
type ListUserParams struct {
	// Page what page to render
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PerPage item count to render per page
	PerPage *int `form:"per_page,omitempty" json:"per_page,omitempty"`

	// Name Name of the user
	Name *string `form:"name,omitempty" json:"name,omitempty"`
}

// CreateUserJSONBody defines parameters for CreateUser.
type CreateUserJSONBody struct {
	Attr *struct {
		Dept  uint32 `json:"dept"`
		Level uint8  `json:"level"`
	} `json:"attr,omitempty"`
	Email    *openapi_types.Email `json:"email,omitempty"`
	Password string               `json:"password"`
	Roles    *[]uint32            `json:"roles,omitempty"`
	Username string               `json:"username"`
}

// LoginJSONRequestBody defines body for Login for application/json ContentType.
type LoginJSONRequestBody LoginJSONBody

// UpdatePermissionJSONRequestBody defines body for UpdatePermission for application/json ContentType.
type UpdatePermissionJSONRequestBody UpdatePermissionJSONBody

// CreatePermissionJSONRequestBody defines body for CreatePermission for application/json ContentType.
type CreatePermissionJSONRequestBody CreatePermissionJSONBody

// CreatePersonalTokenJSONRequestBody defines body for CreatePersonalToken for application/json ContentType.
type CreatePersonalTokenJSONRequestBody CreatePersonalTokenJSONBody

// UpdateRoleJSONRequestBody defines body for UpdateRole for application/json ContentType.
type UpdateRoleJSONRequestBody UpdateRoleJSONBody

// AssignPermissionsJSONRequestBody defines body for AssignPermissions for application/json ContentType.
type AssignPermissionsJSONRequestBody = AssignPermissionsJSONBody

// CreateRoleJSONRequestBody defines body for CreateRole for application/json ContentType.
type CreateRoleJSONRequestBody CreateRoleJSONBody

// UpdateUserJSONRequestBody defines body for UpdateUser for application/json ContentType.
type UpdateUserJSONRequestBody UpdateUserJSONBody

// AssignRolesJSONRequestBody defines body for AssignRoles for application/json ContentType.
type AssignRolesJSONRequestBody = AssignRolesJSONBody

// CreateUserJSONRequestBody defines body for CreateUser for application/json ContentType.
type CreateUserJSONRequestBody CreateUserJSONBody
