// @formatter:off
// package handlers provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package handlers

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Revoke current access token
	// (DELETE /access-token)
	RevokeAccessToken(c *gin.Context)
	// Validate current access token
	// (GET /access-token)
	CheckAccessToken(c *gin.Context)
	// Refresh current access token
	// (POST /access-token/refresh)
	RefreshAccessToken(c *gin.Context)
	// Login
	// (POST /login)
	Login(c *gin.Context)
	// Logout
	// (POST /logout)
	Logout(c *gin.Context)
	// Deletes a Permission by ID
	// (DELETE /permission/{id})
	DeletePermission(c *gin.Context, id uint32)
	// Find a Permission by ID
	// (GET /permission/{id})
	ReadPermission(c *gin.Context, id uint32, params ReadPermissionParams)
	// Updates a Permission
	// (PATCH /permission/{id})
	UpdatePermission(c *gin.Context, id uint32)
	// List Permissions
	// (GET /permissions)
	ListPermission(c *gin.Context, params ListPermissionParams)
	// Create a new Permission
	// (POST /permissions)
	CreatePermission(c *gin.Context)
	// Deletes a PersonalToken by ID
	// (DELETE /personal-token/{id})
	DeletePersonalToken(c *gin.Context, id uint64)
	// Find a PersonalToken by ID
	// (GET /personal-token/{id})
	ReadPersonalToken(c *gin.Context, id uint64)
	// List PersonalTokens
	// (GET /personal-tokens)
	ListPersonalToken(c *gin.Context, params ListPersonalTokenParams)
	// Create a new PersonalToken
	// (POST /personal-tokens)
	CreatePersonalToken(c *gin.Context)
	// Ping
	// (GET /ping)
	Ping(c *gin.Context)
	// quick search permissions
	// (GET /q/permissions)
	HintPermissions(c *gin.Context, params HintPermissionsParams)
	// quick search roles
	// (GET /q/roles)
	HintRoles(c *gin.Context, params HintRolesParams)
	// quick search users
	// (GET /q/users)
	HintUsers(c *gin.Context, params HintUsersParams)
	// Deletes a Role by ID
	// (DELETE /role/{id})
	DeleteRole(c *gin.Context, id uint32)
	// Find a Role by ID
	// (GET /role/{id})
	ReadRole(c *gin.Context, id uint32)
	// Updates a Role
	// (PATCH /role/{id})
	UpdateRole(c *gin.Context, id uint32)
	// List attached Permissions
	// (GET /role/{id}/permissions)
	ListRolePermissions(c *gin.Context, id uint32, params ListRolePermissionsParams)
	// Assign permissions to role
	// (POST /role/{id}/permissions)
	AssignPermissions(c *gin.Context, id uint32)
	// List attached Users
	// (GET /role/{id}/users)
	ListRoleUsers(c *gin.Context, id uint32, params ListRoleUsersParams)
	// List Roles
	// (GET /roles)
	ListRole(c *gin.Context, params ListRoleParams)
	// Create a new Role
	// (POST /roles)
	CreateRole(c *gin.Context)
	// Deletes a User by ID
	// (DELETE /user/{id})
	DeleteUser(c *gin.Context, id uint64, params DeleteUserParams)
	// Find a User by ID
	// (GET /user/{id})
	ReadUser(c *gin.Context, id uint64, params ReadUserParams)
	// Updates a User
	// (PATCH /user/{id})
	UpdateUser(c *gin.Context, id uint64)
	// Restore a trashed record
	// (POST /user/{id}/restore)
	RestoreUser(c *gin.Context, id uint64)
	// List attached Roles
	// (GET /user/{id}/roles)
	ListUserRoles(c *gin.Context, id uint64, params ListUserRolesParams)
	// Assign roles to user
	// (POST /user/{id}/roles)
	AssignRoles(c *gin.Context, id uint64)
	// List Users
	// (GET /users)
	ListUser(c *gin.Context, params ListUserParams)
	// Create a new User
	// (POST /users)
	CreateUser(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// RevokeAccessToken operation middleware
func (siw *ServerInterfaceWrapper) RevokeAccessToken(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.RevokeAccessToken(c)
}

// CheckAccessToken operation middleware
func (siw *ServerInterfaceWrapper) CheckAccessToken(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CheckAccessToken(c)
}

// RefreshAccessToken operation middleware
func (siw *ServerInterfaceWrapper) RefreshAccessToken(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.RefreshAccessToken(c)
}

// Login operation middleware
func (siw *ServerInterfaceWrapper) Login(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.Login(c)
}

// Logout operation middleware
func (siw *ServerInterfaceWrapper) Logout(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.Logout(c)
}

// DeletePermission operation middleware
func (siw *ServerInterfaceWrapper) DeletePermission(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id uint32

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeletePermission(c, id)
}

// ReadPermission operation middleware
func (siw *ServerInterfaceWrapper) ReadPermission(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id uint32

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ReadPermissionParams

	// ------------- Optional query parameter "username" -------------

	err = runtime.BindQueryParameter("form", true, false, "username", c.Request.URL.Query(), &params.Username)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter username: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ReadPermission(c, id, params)
}

// UpdatePermission operation middleware
func (siw *ServerInterfaceWrapper) UpdatePermission(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id uint32

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdatePermission(c, id)
}

// ListPermission operation middleware
func (siw *ServerInterfaceWrapper) ListPermission(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListPermissionParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "per_page" -------------

	err = runtime.BindQueryParameter("form", true, false, "per_page", c.Request.URL.Query(), &params.PerPage)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter per_page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", c.Request.URL.Query(), &params.Name)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter name: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListPermission(c, params)
}

// CreatePermission operation middleware
func (siw *ServerInterfaceWrapper) CreatePermission(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreatePermission(c)
}

// DeletePersonalToken operation middleware
func (siw *ServerInterfaceWrapper) DeletePersonalToken(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id uint64

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeletePersonalToken(c, id)
}

// ReadPersonalToken operation middleware
func (siw *ServerInterfaceWrapper) ReadPersonalToken(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id uint64

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ReadPersonalToken(c, id)
}

// ListPersonalToken operation middleware
func (siw *ServerInterfaceWrapper) ListPersonalToken(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListPersonalTokenParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "per_page" -------------

	err = runtime.BindQueryParameter("form", true, false, "per_page", c.Request.URL.Query(), &params.PerPage)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter per_page: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListPersonalToken(c, params)
}

// CreatePersonalToken operation middleware
func (siw *ServerInterfaceWrapper) CreatePersonalToken(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreatePersonalToken(c)
}

// Ping operation middleware
func (siw *ServerInterfaceWrapper) Ping(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.Ping(c)
}

// HintPermissions operation middleware
func (siw *ServerInterfaceWrapper) HintPermissions(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params HintPermissionsParams

	// ------------- Required query parameter "q" -------------

	if paramValue := c.Query("q"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument q is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "q", c.Request.URL.Query(), &params.Q)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter q: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.HintPermissions(c, params)
}

// HintRoles operation middleware
func (siw *ServerInterfaceWrapper) HintRoles(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params HintRolesParams

	// ------------- Required query parameter "q" -------------

	if paramValue := c.Query("q"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument q is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "q", c.Request.URL.Query(), &params.Q)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter q: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.HintRoles(c, params)
}

// HintUsers operation middleware
func (siw *ServerInterfaceWrapper) HintUsers(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params HintUsersParams

	// ------------- Required query parameter "q" -------------

	if paramValue := c.Query("q"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument q is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "q", c.Request.URL.Query(), &params.Q)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter q: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.HintUsers(c, params)
}

// DeleteRole operation middleware
func (siw *ServerInterfaceWrapper) DeleteRole(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id uint32

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteRole(c, id)
}

// ReadRole operation middleware
func (siw *ServerInterfaceWrapper) ReadRole(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id uint32

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ReadRole(c, id)
}

// UpdateRole operation middleware
func (siw *ServerInterfaceWrapper) UpdateRole(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id uint32

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateRole(c, id)
}

// ListRolePermissions operation middleware
func (siw *ServerInterfaceWrapper) ListRolePermissions(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id uint32

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ListRolePermissionsParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "per_page" -------------

	err = runtime.BindQueryParameter("form", true, false, "per_page", c.Request.URL.Query(), &params.PerPage)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter per_page: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListRolePermissions(c, id, params)
}

// AssignPermissions operation middleware
func (siw *ServerInterfaceWrapper) AssignPermissions(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id uint32

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.AssignPermissions(c, id)
}

// ListRoleUsers operation middleware
func (siw *ServerInterfaceWrapper) ListRoleUsers(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id uint32

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ListRoleUsersParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "per_page" -------------

	err = runtime.BindQueryParameter("form", true, false, "per_page", c.Request.URL.Query(), &params.PerPage)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter per_page: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListRoleUsers(c, id, params)
}

// ListRole operation middleware
func (siw *ServerInterfaceWrapper) ListRole(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListRoleParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "per_page" -------------

	err = runtime.BindQueryParameter("form", true, false, "per_page", c.Request.URL.Query(), &params.PerPage)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter per_page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", c.Request.URL.Query(), &params.Name)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter name: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListRole(c, params)
}

// CreateRole operation middleware
func (siw *ServerInterfaceWrapper) CreateRole(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateRole(c)
}

// DeleteUser operation middleware
func (siw *ServerInterfaceWrapper) DeleteUser(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id uint64

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteUserParams

	// ------------- Optional query parameter "trashed" -------------

	err = runtime.BindQueryParameter("form", true, false, "trashed", c.Request.URL.Query(), &params.Trashed)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter trashed: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteUser(c, id, params)
}

// ReadUser operation middleware
func (siw *ServerInterfaceWrapper) ReadUser(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id uint64

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ReadUserParams

	// ------------- Optional query parameter "trashed" -------------

	err = runtime.BindQueryParameter("form", true, false, "trashed", c.Request.URL.Query(), &params.Trashed)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter trashed: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ReadUser(c, id, params)
}

// UpdateUser operation middleware
func (siw *ServerInterfaceWrapper) UpdateUser(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id uint64

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateUser(c, id)
}

// RestoreUser operation middleware
func (siw *ServerInterfaceWrapper) RestoreUser(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id uint64

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.RestoreUser(c, id)
}

// ListUserRoles operation middleware
func (siw *ServerInterfaceWrapper) ListUserRoles(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id uint64

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ListUserRolesParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "per_page" -------------

	err = runtime.BindQueryParameter("form", true, false, "per_page", c.Request.URL.Query(), &params.PerPage)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter per_page: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListUserRoles(c, id, params)
}

// AssignRoles operation middleware
func (siw *ServerInterfaceWrapper) AssignRoles(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id uint64

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.AssignRoles(c, id)
}

// ListUser operation middleware
func (siw *ServerInterfaceWrapper) ListUser(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListUserParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "per_page" -------------

	err = runtime.BindQueryParameter("form", true, false, "per_page", c.Request.URL.Query(), &params.PerPage)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter per_page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", c.Request.URL.Query(), &params.Name)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter name: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListUser(c, params)
}

// CreateUser operation middleware
func (siw *ServerInterfaceWrapper) CreateUser(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateUser(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.DELETE(options.BaseURL+"/access-token", wrapper.RevokeAccessToken)
	router.GET(options.BaseURL+"/access-token", wrapper.CheckAccessToken)
	router.POST(options.BaseURL+"/access-token/refresh", wrapper.RefreshAccessToken)
	router.POST(options.BaseURL+"/login", wrapper.Login)
	router.POST(options.BaseURL+"/logout", wrapper.Logout)
	router.DELETE(options.BaseURL+"/permission/:id", wrapper.DeletePermission)
	router.GET(options.BaseURL+"/permission/:id", wrapper.ReadPermission)
	router.PATCH(options.BaseURL+"/permission/:id", wrapper.UpdatePermission)
	router.GET(options.BaseURL+"/permissions", wrapper.ListPermission)
	router.POST(options.BaseURL+"/permissions", wrapper.CreatePermission)
	router.DELETE(options.BaseURL+"/personal-token/:id", wrapper.DeletePersonalToken)
	router.GET(options.BaseURL+"/personal-token/:id", wrapper.ReadPersonalToken)
	router.GET(options.BaseURL+"/personal-tokens", wrapper.ListPersonalToken)
	router.POST(options.BaseURL+"/personal-tokens", wrapper.CreatePersonalToken)
	router.GET(options.BaseURL+"/ping", wrapper.Ping)
	router.GET(options.BaseURL+"/q/permissions", wrapper.HintPermissions)
	router.GET(options.BaseURL+"/q/roles", wrapper.HintRoles)
	router.GET(options.BaseURL+"/q/users", wrapper.HintUsers)
	router.DELETE(options.BaseURL+"/role/:id", wrapper.DeleteRole)
	router.GET(options.BaseURL+"/role/:id", wrapper.ReadRole)
	router.PATCH(options.BaseURL+"/role/:id", wrapper.UpdateRole)
	router.GET(options.BaseURL+"/role/:id/permissions", wrapper.ListRolePermissions)
	router.POST(options.BaseURL+"/role/:id/permissions", wrapper.AssignPermissions)
	router.GET(options.BaseURL+"/role/:id/users", wrapper.ListRoleUsers)
	router.GET(options.BaseURL+"/roles", wrapper.ListRole)
	router.POST(options.BaseURL+"/roles", wrapper.CreateRole)
	router.DELETE(options.BaseURL+"/user/:id", wrapper.DeleteUser)
	router.GET(options.BaseURL+"/user/:id", wrapper.ReadUser)
	router.PATCH(options.BaseURL+"/user/:id", wrapper.UpdateUser)
	router.POST(options.BaseURL+"/user/:id/restore", wrapper.RestoreUser)
	router.GET(options.BaseURL+"/user/:id/roles", wrapper.ListUserRoles)
	router.POST(options.BaseURL+"/user/:id/roles", wrapper.AssignRoles)
	router.GET(options.BaseURL+"/users", wrapper.ListUser)
	router.POST(options.BaseURL+"/users", wrapper.CreateUser)
}

type N400JSONResponse struct {
	Code   int          `json:"code"`
	Errors *interface{} `json:"errors,omitempty"`
	Status string       `json:"status"`
}

type N401JSONResponse struct {
	Code   int          `json:"code"`
	Errors *interface{} `json:"errors,omitempty"`
	Status string       `json:"status"`
}

type N403JSONResponse struct {
	Code   int          `json:"code"`
	Errors *interface{} `json:"errors,omitempty"`
	Status string       `json:"status"`
}

type N404JSONResponse struct {
	Code   int          `json:"code"`
	Errors *interface{} `json:"errors,omitempty"`
	Status string       `json:"status"`
}

type N409JSONResponse struct {
	Code   int          `json:"code"`
	Errors *interface{} `json:"errors,omitempty"`
	Status string       `json:"status"`
}

type N422JSONResponse struct {
	Code   int          `json:"code"`
	Errors *interface{} `json:"errors,omitempty"`
	Status string       `json:"status"`
}

type N500JSONResponse struct {
	Code   int          `json:"code"`
	Errors *interface{} `json:"errors,omitempty"`
	Status string       `json:"status"`
}

type RevokeAccessTokenRequestObject struct {
}

type RevokeAccessTokenResponseObject interface {
	VisitRevokeAccessTokenResponse(w http.ResponseWriter) error
}

type RevokeAccessToken204Response struct {
}

func (response RevokeAccessToken204Response) VisitRevokeAccessTokenResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type RevokeAccessToken400JSONResponse struct{ N400JSONResponse }

func (response RevokeAccessToken400JSONResponse) VisitRevokeAccessTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type RevokeAccessToken401JSONResponse struct{ N401JSONResponse }

func (response RevokeAccessToken401JSONResponse) VisitRevokeAccessTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type RevokeAccessToken403JSONResponse struct{ N403JSONResponse }

func (response RevokeAccessToken403JSONResponse) VisitRevokeAccessTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type RevokeAccessToken500JSONResponse struct{ N500JSONResponse }

func (response RevokeAccessToken500JSONResponse) VisitRevokeAccessTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CheckAccessTokenRequestObject struct {
}

type CheckAccessTokenResponseObject interface {
	VisitCheckAccessTokenResponse(w http.ResponseWriter) error
}

type CheckAccessToken204Response struct {
}

func (response CheckAccessToken204Response) VisitCheckAccessTokenResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type CheckAccessToken400JSONResponse struct{ N400JSONResponse }

func (response CheckAccessToken400JSONResponse) VisitCheckAccessTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CheckAccessToken401JSONResponse struct{ N401JSONResponse }

func (response CheckAccessToken401JSONResponse) VisitCheckAccessTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type CheckAccessToken403JSONResponse struct{ N403JSONResponse }

func (response CheckAccessToken403JSONResponse) VisitCheckAccessTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type CheckAccessToken500JSONResponse struct{ N500JSONResponse }

func (response CheckAccessToken500JSONResponse) VisitCheckAccessTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type RefreshAccessTokenRequestObject struct {
}

type RefreshAccessTokenResponseObject interface {
	VisitRefreshAccessTokenResponse(w http.ResponseWriter) error
}

type RefreshAccessToken204Response struct {
}

func (response RefreshAccessToken204Response) VisitRefreshAccessTokenResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type RefreshAccessToken400JSONResponse struct{ N400JSONResponse }

func (response RefreshAccessToken400JSONResponse) VisitRefreshAccessTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type RefreshAccessToken401JSONResponse struct{ N401JSONResponse }

func (response RefreshAccessToken401JSONResponse) VisitRefreshAccessTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type RefreshAccessToken403JSONResponse struct{ N403JSONResponse }

func (response RefreshAccessToken403JSONResponse) VisitRefreshAccessTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type RefreshAccessToken500JSONResponse struct{ N500JSONResponse }

func (response RefreshAccessToken500JSONResponse) VisitRefreshAccessTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type LoginRequestObject struct {
	Body *LoginJSONRequestBody
}

type LoginResponseObject interface {
	VisitLoginResponse(w http.ResponseWriter) error
}

type Login200JSONResponse UserRead

func (response Login200JSONResponse) VisitLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type Login400JSONResponse struct{ N400JSONResponse }

func (response Login400JSONResponse) VisitLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type Login401JSONResponse struct{ N401JSONResponse }

func (response Login401JSONResponse) VisitLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type Login403JSONResponse struct{ N403JSONResponse }

func (response Login403JSONResponse) VisitLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type Login500JSONResponse struct{ N500JSONResponse }

func (response Login500JSONResponse) VisitLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type LogoutRequestObject struct {
}

type LogoutResponseObject interface {
	VisitLogoutResponse(w http.ResponseWriter) error
}

type Logout204Response struct {
}

func (response Logout204Response) VisitLogoutResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type Logout401JSONResponse struct{ N401JSONResponse }

func (response Logout401JSONResponse) VisitLogoutResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type Logout403JSONResponse struct{ N403JSONResponse }

func (response Logout403JSONResponse) VisitLogoutResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type Logout500JSONResponse struct{ N500JSONResponse }

func (response Logout500JSONResponse) VisitLogoutResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeletePermissionRequestObject struct {
	Id uint32 `json:"id"`
}

type DeletePermissionResponseObject interface {
	VisitDeletePermissionResponse(w http.ResponseWriter) error
}

type DeletePermission204Response struct {
}

func (response DeletePermission204Response) VisitDeletePermissionResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeletePermission400JSONResponse struct{ N400JSONResponse }

func (response DeletePermission400JSONResponse) VisitDeletePermissionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeletePermission401JSONResponse struct{ N401JSONResponse }

func (response DeletePermission401JSONResponse) VisitDeletePermissionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeletePermission403JSONResponse struct{ N403JSONResponse }

func (response DeletePermission403JSONResponse) VisitDeletePermissionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type DeletePermission404JSONResponse struct{ N404JSONResponse }

func (response DeletePermission404JSONResponse) VisitDeletePermissionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeletePermission409JSONResponse struct{ N409JSONResponse }

func (response DeletePermission409JSONResponse) VisitDeletePermissionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type DeletePermission500JSONResponse struct{ N500JSONResponse }

func (response DeletePermission500JSONResponse) VisitDeletePermissionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ReadPermissionRequestObject struct {
	Id     uint32 `json:"id"`
	Params ReadPermissionParams
}

type ReadPermissionResponseObject interface {
	VisitReadPermissionResponse(w http.ResponseWriter) error
}

type ReadPermission200JSONResponse PermissionRead

func (response ReadPermission200JSONResponse) VisitReadPermissionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ReadPermission400JSONResponse struct{ N400JSONResponse }

func (response ReadPermission400JSONResponse) VisitReadPermissionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ReadPermission401JSONResponse struct{ N401JSONResponse }

func (response ReadPermission401JSONResponse) VisitReadPermissionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ReadPermission403JSONResponse struct{ N403JSONResponse }

func (response ReadPermission403JSONResponse) VisitReadPermissionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ReadPermission404JSONResponse struct{ N404JSONResponse }

func (response ReadPermission404JSONResponse) VisitReadPermissionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ReadPermission409JSONResponse struct{ N409JSONResponse }

func (response ReadPermission409JSONResponse) VisitReadPermissionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type ReadPermission500JSONResponse struct{ N500JSONResponse }

func (response ReadPermission500JSONResponse) VisitReadPermissionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type UpdatePermissionRequestObject struct {
	Id   uint32 `json:"id"`
	Body *UpdatePermissionJSONRequestBody
}

type UpdatePermissionResponseObject interface {
	VisitUpdatePermissionResponse(w http.ResponseWriter) error
}

type UpdatePermission200JSONResponse PermissionUpdate

func (response UpdatePermission200JSONResponse) VisitUpdatePermissionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdatePermission400JSONResponse struct{ N400JSONResponse }

func (response UpdatePermission400JSONResponse) VisitUpdatePermissionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdatePermission401JSONResponse struct{ N401JSONResponse }

func (response UpdatePermission401JSONResponse) VisitUpdatePermissionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type UpdatePermission403JSONResponse struct{ N403JSONResponse }

func (response UpdatePermission403JSONResponse) VisitUpdatePermissionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type UpdatePermission404JSONResponse struct{ N404JSONResponse }

func (response UpdatePermission404JSONResponse) VisitUpdatePermissionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdatePermission409JSONResponse struct{ N409JSONResponse }

func (response UpdatePermission409JSONResponse) VisitUpdatePermissionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type UpdatePermission422JSONResponse struct{ N422JSONResponse }

func (response UpdatePermission422JSONResponse) VisitUpdatePermissionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type UpdatePermission500JSONResponse struct{ N500JSONResponse }

func (response UpdatePermission500JSONResponse) VisitUpdatePermissionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ListPermissionRequestObject struct {
	Params ListPermissionParams
}

type ListPermissionResponseObject interface {
	VisitListPermissionResponse(w http.ResponseWriter) error
}

type ListPermission200JSONResponse struct {
	// CurrentPage Page number (1-based)
	CurrentPage int `json:"current_page"`

	// Data List of items
	Data []PermissionList `json:"data"`

	// FirstPageUrl URL to the first page
	FirstPageUrl string `json:"first_page_url"`

	// From Index (1-based) of the first item in the current page
	From int `json:"from"`

	// LastPage Last page number
	LastPage int `json:"last_page"`

	// LastPageUrl URL to the last page
	LastPageUrl string `json:"last_page_url"`

	// NextPageUrl URL to the next page
	NextPageUrl string `json:"next_page_url"`

	// Path Base path of the request
	Path string `json:"path"`

	// PerPage Number of items per page
	PerPage int `json:"per_page"`

	// PrevPageUrl URL to the previous page
	PrevPageUrl string `json:"prev_page_url"`

	// To Index (1-based) of the last item in the current page
	To int `json:"to"`

	// Total Total number of items
	Total int `json:"total"`
}

func (response ListPermission200JSONResponse) VisitListPermissionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListPermission400JSONResponse struct{ N400JSONResponse }

func (response ListPermission400JSONResponse) VisitListPermissionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ListPermission401JSONResponse struct{ N401JSONResponse }

func (response ListPermission401JSONResponse) VisitListPermissionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ListPermission403JSONResponse struct{ N403JSONResponse }

func (response ListPermission403JSONResponse) VisitListPermissionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ListPermission404JSONResponse struct{ N404JSONResponse }

func (response ListPermission404JSONResponse) VisitListPermissionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ListPermission409JSONResponse struct{ N409JSONResponse }

func (response ListPermission409JSONResponse) VisitListPermissionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type ListPermission500JSONResponse struct{ N500JSONResponse }

func (response ListPermission500JSONResponse) VisitListPermissionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreatePermissionRequestObject struct {
	Body *CreatePermissionJSONRequestBody
}

type CreatePermissionResponseObject interface {
	VisitCreatePermissionResponse(w http.ResponseWriter) error
}

type CreatePermission201JSONResponse PermissionCreate

func (response CreatePermission201JSONResponse) VisitCreatePermissionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreatePermission400JSONResponse struct{ N400JSONResponse }

func (response CreatePermission400JSONResponse) VisitCreatePermissionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreatePermission401JSONResponse struct{ N401JSONResponse }

func (response CreatePermission401JSONResponse) VisitCreatePermissionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type CreatePermission403JSONResponse struct{ N403JSONResponse }

func (response CreatePermission403JSONResponse) VisitCreatePermissionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type CreatePermission409JSONResponse struct{ N409JSONResponse }

func (response CreatePermission409JSONResponse) VisitCreatePermissionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type CreatePermission500JSONResponse struct{ N500JSONResponse }

func (response CreatePermission500JSONResponse) VisitCreatePermissionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeletePersonalTokenRequestObject struct {
	Id uint64 `json:"id"`
}

type DeletePersonalTokenResponseObject interface {
	VisitDeletePersonalTokenResponse(w http.ResponseWriter) error
}

type DeletePersonalToken204Response struct {
}

func (response DeletePersonalToken204Response) VisitDeletePersonalTokenResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeletePersonalToken400JSONResponse struct{ N400JSONResponse }

func (response DeletePersonalToken400JSONResponse) VisitDeletePersonalTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeletePersonalToken401JSONResponse struct{ N401JSONResponse }

func (response DeletePersonalToken401JSONResponse) VisitDeletePersonalTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeletePersonalToken403JSONResponse struct{ N403JSONResponse }

func (response DeletePersonalToken403JSONResponse) VisitDeletePersonalTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type DeletePersonalToken404JSONResponse struct{ N404JSONResponse }

func (response DeletePersonalToken404JSONResponse) VisitDeletePersonalTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeletePersonalToken409JSONResponse struct{ N409JSONResponse }

func (response DeletePersonalToken409JSONResponse) VisitDeletePersonalTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type DeletePersonalToken500JSONResponse struct{ N500JSONResponse }

func (response DeletePersonalToken500JSONResponse) VisitDeletePersonalTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ReadPersonalTokenRequestObject struct {
	Id uint64 `json:"id"`
}

type ReadPersonalTokenResponseObject interface {
	VisitReadPersonalTokenResponse(w http.ResponseWriter) error
}

type ReadPersonalToken200JSONResponse PersonalTokenRead

func (response ReadPersonalToken200JSONResponse) VisitReadPersonalTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ReadPersonalToken400JSONResponse struct{ N400JSONResponse }

func (response ReadPersonalToken400JSONResponse) VisitReadPersonalTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ReadPersonalToken401JSONResponse struct{ N401JSONResponse }

func (response ReadPersonalToken401JSONResponse) VisitReadPersonalTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ReadPersonalToken403JSONResponse struct{ N403JSONResponse }

func (response ReadPersonalToken403JSONResponse) VisitReadPersonalTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ReadPersonalToken404JSONResponse struct{ N404JSONResponse }

func (response ReadPersonalToken404JSONResponse) VisitReadPersonalTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ReadPersonalToken409JSONResponse struct{ N409JSONResponse }

func (response ReadPersonalToken409JSONResponse) VisitReadPersonalTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type ReadPersonalToken500JSONResponse struct{ N500JSONResponse }

func (response ReadPersonalToken500JSONResponse) VisitReadPersonalTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ListPersonalTokenRequestObject struct {
	Params ListPersonalTokenParams
}

type ListPersonalTokenResponseObject interface {
	VisitListPersonalTokenResponse(w http.ResponseWriter) error
}

type ListPersonalToken200JSONResponse struct {
	// CurrentPage Page number (1-based)
	CurrentPage int `json:"current_page"`

	// Data List of items
	Data []PersonalTokenList `json:"data"`

	// FirstPageUrl URL to the first page
	FirstPageUrl string `json:"first_page_url"`

	// From Index (1-based) of the first item in the current page
	From int `json:"from"`

	// LastPage Last page number
	LastPage int `json:"last_page"`

	// LastPageUrl URL to the last page
	LastPageUrl string `json:"last_page_url"`

	// NextPageUrl URL to the next page
	NextPageUrl string `json:"next_page_url"`

	// Path Base path of the request
	Path string `json:"path"`

	// PerPage Number of items per page
	PerPage int `json:"per_page"`

	// PrevPageUrl URL to the previous page
	PrevPageUrl string `json:"prev_page_url"`

	// To Index (1-based) of the last item in the current page
	To int `json:"to"`

	// Total Total number of items
	Total int `json:"total"`
}

func (response ListPersonalToken200JSONResponse) VisitListPersonalTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListPersonalToken400JSONResponse struct{ N400JSONResponse }

func (response ListPersonalToken400JSONResponse) VisitListPersonalTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ListPersonalToken401JSONResponse struct{ N401JSONResponse }

func (response ListPersonalToken401JSONResponse) VisitListPersonalTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ListPersonalToken403JSONResponse struct{ N403JSONResponse }

func (response ListPersonalToken403JSONResponse) VisitListPersonalTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ListPersonalToken404JSONResponse struct{ N404JSONResponse }

func (response ListPersonalToken404JSONResponse) VisitListPersonalTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ListPersonalToken409JSONResponse struct{ N409JSONResponse }

func (response ListPersonalToken409JSONResponse) VisitListPersonalTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type ListPersonalToken500JSONResponse struct{ N500JSONResponse }

func (response ListPersonalToken500JSONResponse) VisitListPersonalTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreatePersonalTokenRequestObject struct {
	Body *CreatePersonalTokenJSONRequestBody
}

type CreatePersonalTokenResponseObject interface {
	VisitCreatePersonalTokenResponse(w http.ResponseWriter) error
}

type CreatePersonalToken201JSONResponse PersonalTokenCreate

func (response CreatePersonalToken201JSONResponse) VisitCreatePersonalTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreatePersonalToken400JSONResponse struct{ N400JSONResponse }

func (response CreatePersonalToken400JSONResponse) VisitCreatePersonalTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreatePersonalToken401JSONResponse struct{ N401JSONResponse }

func (response CreatePersonalToken401JSONResponse) VisitCreatePersonalTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type CreatePersonalToken403JSONResponse struct{ N403JSONResponse }

func (response CreatePersonalToken403JSONResponse) VisitCreatePersonalTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type CreatePersonalToken409JSONResponse struct{ N409JSONResponse }

func (response CreatePersonalToken409JSONResponse) VisitCreatePersonalTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type CreatePersonalToken500JSONResponse struct{ N500JSONResponse }

func (response CreatePersonalToken500JSONResponse) VisitCreatePersonalTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PingRequestObject struct {
}

type PingResponseObject interface {
	VisitPingResponse(w http.ResponseWriter) error
}

type Ping204Response struct {
}

func (response Ping204Response) VisitPingResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type Ping500JSONResponse struct{ N500JSONResponse }

func (response Ping500JSONResponse) VisitPingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type HintPermissionsRequestObject struct {
	Params HintPermissionsParams
}

type HintPermissionsResponseObject interface {
	VisitHintPermissionsResponse(w http.ResponseWriter) error
}

type HintPermissions200JSONResponse []PermissionList

func (response HintPermissions200JSONResponse) VisitHintPermissionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type HintPermissions400JSONResponse struct{ N400JSONResponse }

func (response HintPermissions400JSONResponse) VisitHintPermissionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type HintPermissions401JSONResponse struct{ N401JSONResponse }

func (response HintPermissions401JSONResponse) VisitHintPermissionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type HintPermissions403JSONResponse struct{ N403JSONResponse }

func (response HintPermissions403JSONResponse) VisitHintPermissionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type HintPermissions500JSONResponse struct{ N500JSONResponse }

func (response HintPermissions500JSONResponse) VisitHintPermissionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type HintRolesRequestObject struct {
	Params HintRolesParams
}

type HintRolesResponseObject interface {
	VisitHintRolesResponse(w http.ResponseWriter) error
}

type HintRoles200JSONResponse []RoleList

func (response HintRoles200JSONResponse) VisitHintRolesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type HintRoles400JSONResponse struct{ N400JSONResponse }

func (response HintRoles400JSONResponse) VisitHintRolesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type HintRoles401JSONResponse struct{ N401JSONResponse }

func (response HintRoles401JSONResponse) VisitHintRolesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type HintRoles403JSONResponse struct{ N403JSONResponse }

func (response HintRoles403JSONResponse) VisitHintRolesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type HintRoles500JSONResponse struct{ N500JSONResponse }

func (response HintRoles500JSONResponse) VisitHintRolesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type HintUsersRequestObject struct {
	Params HintUsersParams
}

type HintUsersResponseObject interface {
	VisitHintUsersResponse(w http.ResponseWriter) error
}

type HintUsers200JSONResponse []UserList

func (response HintUsers200JSONResponse) VisitHintUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type HintUsers400JSONResponse struct{ N400JSONResponse }

func (response HintUsers400JSONResponse) VisitHintUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type HintUsers401JSONResponse struct{ N401JSONResponse }

func (response HintUsers401JSONResponse) VisitHintUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type HintUsers403JSONResponse struct{ N403JSONResponse }

func (response HintUsers403JSONResponse) VisitHintUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type HintUsers500JSONResponse struct{ N500JSONResponse }

func (response HintUsers500JSONResponse) VisitHintUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteRoleRequestObject struct {
	Id uint32 `json:"id"`
}

type DeleteRoleResponseObject interface {
	VisitDeleteRoleResponse(w http.ResponseWriter) error
}

type DeleteRole204Response struct {
}

func (response DeleteRole204Response) VisitDeleteRoleResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteRole400JSONResponse struct{ N400JSONResponse }

func (response DeleteRole400JSONResponse) VisitDeleteRoleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteRole401JSONResponse struct{ N401JSONResponse }

func (response DeleteRole401JSONResponse) VisitDeleteRoleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeleteRole403JSONResponse struct{ N403JSONResponse }

func (response DeleteRole403JSONResponse) VisitDeleteRoleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type DeleteRole404JSONResponse struct{ N404JSONResponse }

func (response DeleteRole404JSONResponse) VisitDeleteRoleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteRole409JSONResponse struct{ N409JSONResponse }

func (response DeleteRole409JSONResponse) VisitDeleteRoleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type DeleteRole500JSONResponse struct{ N500JSONResponse }

func (response DeleteRole500JSONResponse) VisitDeleteRoleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ReadRoleRequestObject struct {
	Id uint32 `json:"id"`
}

type ReadRoleResponseObject interface {
	VisitReadRoleResponse(w http.ResponseWriter) error
}

type ReadRole200JSONResponse RoleRead

func (response ReadRole200JSONResponse) VisitReadRoleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ReadRole400JSONResponse struct{ N400JSONResponse }

func (response ReadRole400JSONResponse) VisitReadRoleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ReadRole401JSONResponse struct{ N401JSONResponse }

func (response ReadRole401JSONResponse) VisitReadRoleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ReadRole403JSONResponse struct{ N403JSONResponse }

func (response ReadRole403JSONResponse) VisitReadRoleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ReadRole404JSONResponse struct{ N404JSONResponse }

func (response ReadRole404JSONResponse) VisitReadRoleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ReadRole409JSONResponse struct{ N409JSONResponse }

func (response ReadRole409JSONResponse) VisitReadRoleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type ReadRole500JSONResponse struct{ N500JSONResponse }

func (response ReadRole500JSONResponse) VisitReadRoleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type UpdateRoleRequestObject struct {
	Id   uint32 `json:"id"`
	Body *UpdateRoleJSONRequestBody
}

type UpdateRoleResponseObject interface {
	VisitUpdateRoleResponse(w http.ResponseWriter) error
}

type UpdateRole200JSONResponse RoleUpdate

func (response UpdateRole200JSONResponse) VisitUpdateRoleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateRole400JSONResponse struct{ N400JSONResponse }

func (response UpdateRole400JSONResponse) VisitUpdateRoleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdateRole401JSONResponse struct{ N401JSONResponse }

func (response UpdateRole401JSONResponse) VisitUpdateRoleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type UpdateRole403JSONResponse struct{ N403JSONResponse }

func (response UpdateRole403JSONResponse) VisitUpdateRoleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type UpdateRole404JSONResponse struct{ N404JSONResponse }

func (response UpdateRole404JSONResponse) VisitUpdateRoleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateRole409JSONResponse struct{ N409JSONResponse }

func (response UpdateRole409JSONResponse) VisitUpdateRoleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type UpdateRole422JSONResponse struct{ N422JSONResponse }

func (response UpdateRole422JSONResponse) VisitUpdateRoleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type UpdateRole500JSONResponse struct{ N500JSONResponse }

func (response UpdateRole500JSONResponse) VisitUpdateRoleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ListRolePermissionsRequestObject struct {
	Id     uint32 `json:"id"`
	Params ListRolePermissionsParams
}

type ListRolePermissionsResponseObject interface {
	VisitListRolePermissionsResponse(w http.ResponseWriter) error
}

type ListRolePermissions200JSONResponse struct {
	// CurrentPage Page number (1-based)
	CurrentPage int `json:"current_page"`

	// Data List of items
	Data []RolePermissionsList `json:"data"`

	// FirstPageUrl URL to the first page
	FirstPageUrl string `json:"first_page_url"`

	// From Index (1-based) of the first item in the current page
	From int `json:"from"`

	// LastPage Last page number
	LastPage int `json:"last_page"`

	// LastPageUrl URL to the last page
	LastPageUrl string `json:"last_page_url"`

	// NextPageUrl URL to the next page
	NextPageUrl string `json:"next_page_url"`

	// Path Base path of the request
	Path string `json:"path"`

	// PerPage Number of items per page
	PerPage int `json:"per_page"`

	// PrevPageUrl URL to the previous page
	PrevPageUrl string `json:"prev_page_url"`

	// To Index (1-based) of the last item in the current page
	To int `json:"to"`

	// Total Total number of items
	Total int `json:"total"`
}

func (response ListRolePermissions200JSONResponse) VisitListRolePermissionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListRolePermissions400JSONResponse struct{ N400JSONResponse }

func (response ListRolePermissions400JSONResponse) VisitListRolePermissionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ListRolePermissions401JSONResponse struct{ N401JSONResponse }

func (response ListRolePermissions401JSONResponse) VisitListRolePermissionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ListRolePermissions403JSONResponse struct{ N403JSONResponse }

func (response ListRolePermissions403JSONResponse) VisitListRolePermissionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ListRolePermissions404JSONResponse struct{ N404JSONResponse }

func (response ListRolePermissions404JSONResponse) VisitListRolePermissionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ListRolePermissions409JSONResponse struct{ N409JSONResponse }

func (response ListRolePermissions409JSONResponse) VisitListRolePermissionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type ListRolePermissions500JSONResponse struct{ N500JSONResponse }

func (response ListRolePermissions500JSONResponse) VisitListRolePermissionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type AssignPermissionsRequestObject struct {
	Id   uint32 `json:"id"`
	Body *AssignPermissionsJSONRequestBody
}

type AssignPermissionsResponseObject interface {
	VisitAssignPermissionsResponse(w http.ResponseWriter) error
}

type AssignPermissions204Response struct {
}

func (response AssignPermissions204Response) VisitAssignPermissionsResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type AssignPermissions400JSONResponse struct{ N400JSONResponse }

func (response AssignPermissions400JSONResponse) VisitAssignPermissionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type AssignPermissions401JSONResponse struct{ N401JSONResponse }

func (response AssignPermissions401JSONResponse) VisitAssignPermissionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type AssignPermissions403JSONResponse struct{ N403JSONResponse }

func (response AssignPermissions403JSONResponse) VisitAssignPermissionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type AssignPermissions500JSONResponse struct{ N500JSONResponse }

func (response AssignPermissions500JSONResponse) VisitAssignPermissionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ListRoleUsersRequestObject struct {
	Id     uint32 `json:"id"`
	Params ListRoleUsersParams
}

type ListRoleUsersResponseObject interface {
	VisitListRoleUsersResponse(w http.ResponseWriter) error
}

type ListRoleUsers200JSONResponse struct {
	// CurrentPage Page number (1-based)
	CurrentPage int `json:"current_page"`

	// Data List of items
	Data []RoleUsersList `json:"data"`

	// FirstPageUrl URL to the first page
	FirstPageUrl string `json:"first_page_url"`

	// From Index (1-based) of the first item in the current page
	From int `json:"from"`

	// LastPage Last page number
	LastPage int `json:"last_page"`

	// LastPageUrl URL to the last page
	LastPageUrl string `json:"last_page_url"`

	// NextPageUrl URL to the next page
	NextPageUrl string `json:"next_page_url"`

	// Path Base path of the request
	Path string `json:"path"`

	// PerPage Number of items per page
	PerPage int `json:"per_page"`

	// PrevPageUrl URL to the previous page
	PrevPageUrl string `json:"prev_page_url"`

	// To Index (1-based) of the last item in the current page
	To int `json:"to"`

	// Total Total number of items
	Total int `json:"total"`
}

func (response ListRoleUsers200JSONResponse) VisitListRoleUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListRoleUsers400JSONResponse struct{ N400JSONResponse }

func (response ListRoleUsers400JSONResponse) VisitListRoleUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ListRoleUsers401JSONResponse struct{ N401JSONResponse }

func (response ListRoleUsers401JSONResponse) VisitListRoleUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ListRoleUsers403JSONResponse struct{ N403JSONResponse }

func (response ListRoleUsers403JSONResponse) VisitListRoleUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ListRoleUsers404JSONResponse struct{ N404JSONResponse }

func (response ListRoleUsers404JSONResponse) VisitListRoleUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ListRoleUsers409JSONResponse struct{ N409JSONResponse }

func (response ListRoleUsers409JSONResponse) VisitListRoleUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type ListRoleUsers500JSONResponse struct{ N500JSONResponse }

func (response ListRoleUsers500JSONResponse) VisitListRoleUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ListRoleRequestObject struct {
	Params ListRoleParams
}

type ListRoleResponseObject interface {
	VisitListRoleResponse(w http.ResponseWriter) error
}

type ListRole200JSONResponse struct {
	// CurrentPage Page number (1-based)
	CurrentPage int `json:"current_page"`

	// Data List of items
	Data []RoleList `json:"data"`

	// FirstPageUrl URL to the first page
	FirstPageUrl string `json:"first_page_url"`

	// From Index (1-based) of the first item in the current page
	From int `json:"from"`

	// LastPage Last page number
	LastPage int `json:"last_page"`

	// LastPageUrl URL to the last page
	LastPageUrl string `json:"last_page_url"`

	// NextPageUrl URL to the next page
	NextPageUrl string `json:"next_page_url"`

	// Path Base path of the request
	Path string `json:"path"`

	// PerPage Number of items per page
	PerPage int `json:"per_page"`

	// PrevPageUrl URL to the previous page
	PrevPageUrl string `json:"prev_page_url"`

	// To Index (1-based) of the last item in the current page
	To int `json:"to"`

	// Total Total number of items
	Total int `json:"total"`
}

func (response ListRole200JSONResponse) VisitListRoleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListRole400JSONResponse struct{ N400JSONResponse }

func (response ListRole400JSONResponse) VisitListRoleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ListRole401JSONResponse struct{ N401JSONResponse }

func (response ListRole401JSONResponse) VisitListRoleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ListRole403JSONResponse struct{ N403JSONResponse }

func (response ListRole403JSONResponse) VisitListRoleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ListRole404JSONResponse struct{ N404JSONResponse }

func (response ListRole404JSONResponse) VisitListRoleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ListRole409JSONResponse struct{ N409JSONResponse }

func (response ListRole409JSONResponse) VisitListRoleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type ListRole500JSONResponse struct{ N500JSONResponse }

func (response ListRole500JSONResponse) VisitListRoleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateRoleRequestObject struct {
	Body *CreateRoleJSONRequestBody
}

type CreateRoleResponseObject interface {
	VisitCreateRoleResponse(w http.ResponseWriter) error
}

type CreateRole201JSONResponse RoleCreate

func (response CreateRole201JSONResponse) VisitCreateRoleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateRole400JSONResponse struct{ N400JSONResponse }

func (response CreateRole400JSONResponse) VisitCreateRoleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateRole401JSONResponse struct{ N401JSONResponse }

func (response CreateRole401JSONResponse) VisitCreateRoleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type CreateRole403JSONResponse struct{ N403JSONResponse }

func (response CreateRole403JSONResponse) VisitCreateRoleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type CreateRole409JSONResponse struct{ N409JSONResponse }

func (response CreateRole409JSONResponse) VisitCreateRoleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type CreateRole500JSONResponse struct{ N500JSONResponse }

func (response CreateRole500JSONResponse) VisitCreateRoleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteUserRequestObject struct {
	Id     uint64 `json:"id"`
	Params DeleteUserParams
}

type DeleteUserResponseObject interface {
	VisitDeleteUserResponse(w http.ResponseWriter) error
}

type DeleteUser204Response struct {
}

func (response DeleteUser204Response) VisitDeleteUserResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteUser400JSONResponse struct{ N400JSONResponse }

func (response DeleteUser400JSONResponse) VisitDeleteUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteUser401JSONResponse struct{ N401JSONResponse }

func (response DeleteUser401JSONResponse) VisitDeleteUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeleteUser403JSONResponse struct{ N403JSONResponse }

func (response DeleteUser403JSONResponse) VisitDeleteUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type DeleteUser404JSONResponse struct{ N404JSONResponse }

func (response DeleteUser404JSONResponse) VisitDeleteUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteUser409JSONResponse struct{ N409JSONResponse }

func (response DeleteUser409JSONResponse) VisitDeleteUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type DeleteUser500JSONResponse struct{ N500JSONResponse }

func (response DeleteUser500JSONResponse) VisitDeleteUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ReadUserRequestObject struct {
	Id     uint64 `json:"id"`
	Params ReadUserParams
}

type ReadUserResponseObject interface {
	VisitReadUserResponse(w http.ResponseWriter) error
}

type ReadUser200JSONResponse UserRead

func (response ReadUser200JSONResponse) VisitReadUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ReadUser400JSONResponse struct{ N400JSONResponse }

func (response ReadUser400JSONResponse) VisitReadUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ReadUser401JSONResponse struct{ N401JSONResponse }

func (response ReadUser401JSONResponse) VisitReadUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ReadUser403JSONResponse struct{ N403JSONResponse }

func (response ReadUser403JSONResponse) VisitReadUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ReadUser404JSONResponse struct{ N404JSONResponse }

func (response ReadUser404JSONResponse) VisitReadUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ReadUser409JSONResponse struct{ N409JSONResponse }

func (response ReadUser409JSONResponse) VisitReadUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type ReadUser500JSONResponse struct{ N500JSONResponse }

func (response ReadUser500JSONResponse) VisitReadUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type UpdateUserRequestObject struct {
	Id   uint64 `json:"id"`
	Body *UpdateUserJSONRequestBody
}

type UpdateUserResponseObject interface {
	VisitUpdateUserResponse(w http.ResponseWriter) error
}

type UpdateUser200JSONResponse UserUpdate

func (response UpdateUser200JSONResponse) VisitUpdateUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateUser400JSONResponse struct{ N400JSONResponse }

func (response UpdateUser400JSONResponse) VisitUpdateUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdateUser401JSONResponse struct{ N401JSONResponse }

func (response UpdateUser401JSONResponse) VisitUpdateUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type UpdateUser403JSONResponse struct{ N403JSONResponse }

func (response UpdateUser403JSONResponse) VisitUpdateUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type UpdateUser404JSONResponse struct{ N404JSONResponse }

func (response UpdateUser404JSONResponse) VisitUpdateUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateUser409JSONResponse struct{ N409JSONResponse }

func (response UpdateUser409JSONResponse) VisitUpdateUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type UpdateUser422JSONResponse struct{ N422JSONResponse }

func (response UpdateUser422JSONResponse) VisitUpdateUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type UpdateUser500JSONResponse struct{ N500JSONResponse }

func (response UpdateUser500JSONResponse) VisitUpdateUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type RestoreUserRequestObject struct {
	Id uint64 `json:"id"`
}

type RestoreUserResponseObject interface {
	VisitRestoreUserResponse(w http.ResponseWriter) error
}

type RestoreUser204Response struct {
}

func (response RestoreUser204Response) VisitRestoreUserResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type RestoreUser400JSONResponse struct{ N400JSONResponse }

func (response RestoreUser400JSONResponse) VisitRestoreUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type RestoreUser401JSONResponse struct{ N401JSONResponse }

func (response RestoreUser401JSONResponse) VisitRestoreUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type RestoreUser403JSONResponse struct{ N403JSONResponse }

func (response RestoreUser403JSONResponse) VisitRestoreUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type RestoreUser404JSONResponse struct{ N404JSONResponse }

func (response RestoreUser404JSONResponse) VisitRestoreUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type RestoreUser409JSONResponse struct{ N409JSONResponse }

func (response RestoreUser409JSONResponse) VisitRestoreUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type RestoreUser500JSONResponse struct{ N500JSONResponse }

func (response RestoreUser500JSONResponse) VisitRestoreUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ListUserRolesRequestObject struct {
	Id     uint64 `json:"id"`
	Params ListUserRolesParams
}

type ListUserRolesResponseObject interface {
	VisitListUserRolesResponse(w http.ResponseWriter) error
}

type ListUserRoles200JSONResponse struct {
	// CurrentPage Page number (1-based)
	CurrentPage int `json:"current_page"`

	// Data List of items
	Data []UserRolesList `json:"data"`

	// FirstPageUrl URL to the first page
	FirstPageUrl string `json:"first_page_url"`

	// From Index (1-based) of the first item in the current page
	From int `json:"from"`

	// LastPage Last page number
	LastPage int `json:"last_page"`

	// LastPageUrl URL to the last page
	LastPageUrl string `json:"last_page_url"`

	// NextPageUrl URL to the next page
	NextPageUrl string `json:"next_page_url"`

	// Path Base path of the request
	Path string `json:"path"`

	// PerPage Number of items per page
	PerPage int `json:"per_page"`

	// PrevPageUrl URL to the previous page
	PrevPageUrl string `json:"prev_page_url"`

	// To Index (1-based) of the last item in the current page
	To int `json:"to"`

	// Total Total number of items
	Total int `json:"total"`
}

func (response ListUserRoles200JSONResponse) VisitListUserRolesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListUserRoles400JSONResponse struct{ N400JSONResponse }

func (response ListUserRoles400JSONResponse) VisitListUserRolesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ListUserRoles401JSONResponse struct{ N401JSONResponse }

func (response ListUserRoles401JSONResponse) VisitListUserRolesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ListUserRoles403JSONResponse struct{ N403JSONResponse }

func (response ListUserRoles403JSONResponse) VisitListUserRolesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ListUserRoles404JSONResponse struct{ N404JSONResponse }

func (response ListUserRoles404JSONResponse) VisitListUserRolesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ListUserRoles409JSONResponse struct{ N409JSONResponse }

func (response ListUserRoles409JSONResponse) VisitListUserRolesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type ListUserRoles500JSONResponse struct{ N500JSONResponse }

func (response ListUserRoles500JSONResponse) VisitListUserRolesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type AssignRolesRequestObject struct {
	Id   uint64 `json:"id"`
	Body *AssignRolesJSONRequestBody
}

type AssignRolesResponseObject interface {
	VisitAssignRolesResponse(w http.ResponseWriter) error
}

type AssignRoles204Response struct {
}

func (response AssignRoles204Response) VisitAssignRolesResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type AssignRoles400JSONResponse struct{ N400JSONResponse }

func (response AssignRoles400JSONResponse) VisitAssignRolesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type AssignRoles401JSONResponse struct{ N401JSONResponse }

func (response AssignRoles401JSONResponse) VisitAssignRolesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type AssignRoles403JSONResponse struct{ N403JSONResponse }

func (response AssignRoles403JSONResponse) VisitAssignRolesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type AssignRoles500JSONResponse struct{ N500JSONResponse }

func (response AssignRoles500JSONResponse) VisitAssignRolesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ListUserRequestObject struct {
	Params ListUserParams
}

type ListUserResponseObject interface {
	VisitListUserResponse(w http.ResponseWriter) error
}

type ListUser200JSONResponse struct {
	// CurrentPage Page number (1-based)
	CurrentPage int `json:"current_page"`

	// Data List of items
	Data []UserList `json:"data"`

	// FirstPageUrl URL to the first page
	FirstPageUrl string `json:"first_page_url"`

	// From Index (1-based) of the first item in the current page
	From int `json:"from"`

	// LastPage Last page number
	LastPage int `json:"last_page"`

	// LastPageUrl URL to the last page
	LastPageUrl string `json:"last_page_url"`

	// NextPageUrl URL to the next page
	NextPageUrl string `json:"next_page_url"`

	// Path Base path of the request
	Path string `json:"path"`

	// PerPage Number of items per page
	PerPage int `json:"per_page"`

	// PrevPageUrl URL to the previous page
	PrevPageUrl string `json:"prev_page_url"`

	// To Index (1-based) of the last item in the current page
	To int `json:"to"`

	// Total Total number of items
	Total int `json:"total"`
}

func (response ListUser200JSONResponse) VisitListUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListUser400JSONResponse struct{ N400JSONResponse }

func (response ListUser400JSONResponse) VisitListUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ListUser401JSONResponse struct{ N401JSONResponse }

func (response ListUser401JSONResponse) VisitListUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ListUser403JSONResponse struct{ N403JSONResponse }

func (response ListUser403JSONResponse) VisitListUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ListUser404JSONResponse struct{ N404JSONResponse }

func (response ListUser404JSONResponse) VisitListUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ListUser409JSONResponse struct{ N409JSONResponse }

func (response ListUser409JSONResponse) VisitListUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type ListUser500JSONResponse struct{ N500JSONResponse }

func (response ListUser500JSONResponse) VisitListUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateUserRequestObject struct {
	Body *CreateUserJSONRequestBody
}

type CreateUserResponseObject interface {
	VisitCreateUserResponse(w http.ResponseWriter) error
}

type CreateUser201JSONResponse UserCreate

func (response CreateUser201JSONResponse) VisitCreateUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateUser400JSONResponse struct{ N400JSONResponse }

func (response CreateUser400JSONResponse) VisitCreateUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateUser401JSONResponse struct{ N401JSONResponse }

func (response CreateUser401JSONResponse) VisitCreateUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type CreateUser403JSONResponse struct{ N403JSONResponse }

func (response CreateUser403JSONResponse) VisitCreateUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type CreateUser409JSONResponse struct{ N409JSONResponse }

func (response CreateUser409JSONResponse) VisitCreateUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type CreateUser500JSONResponse struct{ N500JSONResponse }

func (response CreateUser500JSONResponse) VisitCreateUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Revoke current access token
	// (DELETE /access-token)
	RevokeAccessToken(ctx context.Context, request RevokeAccessTokenRequestObject) (RevokeAccessTokenResponseObject, error)
	// Validate current access token
	// (GET /access-token)
	CheckAccessToken(ctx context.Context, request CheckAccessTokenRequestObject) (CheckAccessTokenResponseObject, error)
	// Refresh current access token
	// (POST /access-token/refresh)
	RefreshAccessToken(ctx context.Context, request RefreshAccessTokenRequestObject) (RefreshAccessTokenResponseObject, error)
	// Login
	// (POST /login)
	Login(ctx context.Context, request LoginRequestObject) (LoginResponseObject, error)
	// Logout
	// (POST /logout)
	Logout(ctx context.Context, request LogoutRequestObject) (LogoutResponseObject, error)
	// Deletes a Permission by ID
	// (DELETE /permission/{id})
	DeletePermission(ctx context.Context, request DeletePermissionRequestObject) (DeletePermissionResponseObject, error)
	// Find a Permission by ID
	// (GET /permission/{id})
	ReadPermission(ctx context.Context, request ReadPermissionRequestObject) (ReadPermissionResponseObject, error)
	// Updates a Permission
	// (PATCH /permission/{id})
	UpdatePermission(ctx context.Context, request UpdatePermissionRequestObject) (UpdatePermissionResponseObject, error)
	// List Permissions
	// (GET /permissions)
	ListPermission(ctx context.Context, request ListPermissionRequestObject) (ListPermissionResponseObject, error)
	// Create a new Permission
	// (POST /permissions)
	CreatePermission(ctx context.Context, request CreatePermissionRequestObject) (CreatePermissionResponseObject, error)
	// Deletes a PersonalToken by ID
	// (DELETE /personal-token/{id})
	DeletePersonalToken(ctx context.Context, request DeletePersonalTokenRequestObject) (DeletePersonalTokenResponseObject, error)
	// Find a PersonalToken by ID
	// (GET /personal-token/{id})
	ReadPersonalToken(ctx context.Context, request ReadPersonalTokenRequestObject) (ReadPersonalTokenResponseObject, error)
	// List PersonalTokens
	// (GET /personal-tokens)
	ListPersonalToken(ctx context.Context, request ListPersonalTokenRequestObject) (ListPersonalTokenResponseObject, error)
	// Create a new PersonalToken
	// (POST /personal-tokens)
	CreatePersonalToken(ctx context.Context, request CreatePersonalTokenRequestObject) (CreatePersonalTokenResponseObject, error)
	// Ping
	// (GET /ping)
	Ping(ctx context.Context, request PingRequestObject) (PingResponseObject, error)
	// quick search permissions
	// (GET /q/permissions)
	HintPermissions(ctx context.Context, request HintPermissionsRequestObject) (HintPermissionsResponseObject, error)
	// quick search roles
	// (GET /q/roles)
	HintRoles(ctx context.Context, request HintRolesRequestObject) (HintRolesResponseObject, error)
	// quick search users
	// (GET /q/users)
	HintUsers(ctx context.Context, request HintUsersRequestObject) (HintUsersResponseObject, error)
	// Deletes a Role by ID
	// (DELETE /role/{id})
	DeleteRole(ctx context.Context, request DeleteRoleRequestObject) (DeleteRoleResponseObject, error)
	// Find a Role by ID
	// (GET /role/{id})
	ReadRole(ctx context.Context, request ReadRoleRequestObject) (ReadRoleResponseObject, error)
	// Updates a Role
	// (PATCH /role/{id})
	UpdateRole(ctx context.Context, request UpdateRoleRequestObject) (UpdateRoleResponseObject, error)
	// List attached Permissions
	// (GET /role/{id}/permissions)
	ListRolePermissions(ctx context.Context, request ListRolePermissionsRequestObject) (ListRolePermissionsResponseObject, error)
	// Assign permissions to role
	// (POST /role/{id}/permissions)
	AssignPermissions(ctx context.Context, request AssignPermissionsRequestObject) (AssignPermissionsResponseObject, error)
	// List attached Users
	// (GET /role/{id}/users)
	ListRoleUsers(ctx context.Context, request ListRoleUsersRequestObject) (ListRoleUsersResponseObject, error)
	// List Roles
	// (GET /roles)
	ListRole(ctx context.Context, request ListRoleRequestObject) (ListRoleResponseObject, error)
	// Create a new Role
	// (POST /roles)
	CreateRole(ctx context.Context, request CreateRoleRequestObject) (CreateRoleResponseObject, error)
	// Deletes a User by ID
	// (DELETE /user/{id})
	DeleteUser(ctx context.Context, request DeleteUserRequestObject) (DeleteUserResponseObject, error)
	// Find a User by ID
	// (GET /user/{id})
	ReadUser(ctx context.Context, request ReadUserRequestObject) (ReadUserResponseObject, error)
	// Updates a User
	// (PATCH /user/{id})
	UpdateUser(ctx context.Context, request UpdateUserRequestObject) (UpdateUserResponseObject, error)
	// Restore a trashed record
	// (POST /user/{id}/restore)
	RestoreUser(ctx context.Context, request RestoreUserRequestObject) (RestoreUserResponseObject, error)
	// List attached Roles
	// (GET /user/{id}/roles)
	ListUserRoles(ctx context.Context, request ListUserRolesRequestObject) (ListUserRolesResponseObject, error)
	// Assign roles to user
	// (POST /user/{id}/roles)
	AssignRoles(ctx context.Context, request AssignRolesRequestObject) (AssignRolesResponseObject, error)
	// List Users
	// (GET /users)
	ListUser(ctx context.Context, request ListUserRequestObject) (ListUserResponseObject, error)
	// Create a new User
	// (POST /users)
	CreateUser(ctx context.Context, request CreateUserRequestObject) (CreateUserResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// RevokeAccessToken operation middleware
func (sh *strictHandler) RevokeAccessToken(ctx *gin.Context) {
	var request RevokeAccessTokenRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.RevokeAccessToken(ctx, request.(RevokeAccessTokenRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RevokeAccessToken")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(RevokeAccessTokenResponseObject); ok {
		if err := validResponse.VisitRevokeAccessTokenResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CheckAccessToken operation middleware
func (sh *strictHandler) CheckAccessToken(ctx *gin.Context) {
	var request CheckAccessTokenRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CheckAccessToken(ctx, request.(CheckAccessTokenRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CheckAccessToken")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CheckAccessTokenResponseObject); ok {
		if err := validResponse.VisitCheckAccessTokenResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// RefreshAccessToken operation middleware
func (sh *strictHandler) RefreshAccessToken(ctx *gin.Context) {
	var request RefreshAccessTokenRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.RefreshAccessToken(ctx, request.(RefreshAccessTokenRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RefreshAccessToken")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(RefreshAccessTokenResponseObject); ok {
		if err := validResponse.VisitRefreshAccessTokenResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Login operation middleware
func (sh *strictHandler) Login(ctx *gin.Context) {
	var request LoginRequestObject

	var body LoginJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusUnprocessableEntity)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Login(ctx, request.(LoginRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Login")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(LoginResponseObject); ok {
		if err := validResponse.VisitLoginResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Logout operation middleware
func (sh *strictHandler) Logout(ctx *gin.Context) {
	var request LogoutRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Logout(ctx, request.(LogoutRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Logout")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(LogoutResponseObject); ok {
		if err := validResponse.VisitLogoutResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeletePermission operation middleware
func (sh *strictHandler) DeletePermission(ctx *gin.Context, id uint32) {
	var request DeletePermissionRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeletePermission(ctx, request.(DeletePermissionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeletePermission")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeletePermissionResponseObject); ok {
		if err := validResponse.VisitDeletePermissionResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ReadPermission operation middleware
func (sh *strictHandler) ReadPermission(ctx *gin.Context, id uint32, params ReadPermissionParams) {
	var request ReadPermissionRequestObject

	request.Id = id
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ReadPermission(ctx, request.(ReadPermissionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ReadPermission")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ReadPermissionResponseObject); ok {
		if err := validResponse.VisitReadPermissionResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdatePermission operation middleware
func (sh *strictHandler) UpdatePermission(ctx *gin.Context, id uint32) {
	var request UpdatePermissionRequestObject

	request.Id = id

	var body UpdatePermissionJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusUnprocessableEntity)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdatePermission(ctx, request.(UpdatePermissionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdatePermission")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(UpdatePermissionResponseObject); ok {
		if err := validResponse.VisitUpdatePermissionResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListPermission operation middleware
func (sh *strictHandler) ListPermission(ctx *gin.Context, params ListPermissionParams) {
	var request ListPermissionRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ListPermission(ctx, request.(ListPermissionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListPermission")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ListPermissionResponseObject); ok {
		if err := validResponse.VisitListPermissionResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreatePermission operation middleware
func (sh *strictHandler) CreatePermission(ctx *gin.Context) {
	var request CreatePermissionRequestObject

	var body CreatePermissionJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusUnprocessableEntity)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreatePermission(ctx, request.(CreatePermissionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreatePermission")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreatePermissionResponseObject); ok {
		if err := validResponse.VisitCreatePermissionResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeletePersonalToken operation middleware
func (sh *strictHandler) DeletePersonalToken(ctx *gin.Context, id uint64) {
	var request DeletePersonalTokenRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeletePersonalToken(ctx, request.(DeletePersonalTokenRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeletePersonalToken")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeletePersonalTokenResponseObject); ok {
		if err := validResponse.VisitDeletePersonalTokenResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ReadPersonalToken operation middleware
func (sh *strictHandler) ReadPersonalToken(ctx *gin.Context, id uint64) {
	var request ReadPersonalTokenRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ReadPersonalToken(ctx, request.(ReadPersonalTokenRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ReadPersonalToken")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ReadPersonalTokenResponseObject); ok {
		if err := validResponse.VisitReadPersonalTokenResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListPersonalToken operation middleware
func (sh *strictHandler) ListPersonalToken(ctx *gin.Context, params ListPersonalTokenParams) {
	var request ListPersonalTokenRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ListPersonalToken(ctx, request.(ListPersonalTokenRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListPersonalToken")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ListPersonalTokenResponseObject); ok {
		if err := validResponse.VisitListPersonalTokenResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreatePersonalToken operation middleware
func (sh *strictHandler) CreatePersonalToken(ctx *gin.Context) {
	var request CreatePersonalTokenRequestObject

	var body CreatePersonalTokenJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusUnprocessableEntity)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreatePersonalToken(ctx, request.(CreatePersonalTokenRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreatePersonalToken")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreatePersonalTokenResponseObject); ok {
		if err := validResponse.VisitCreatePersonalTokenResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Ping operation middleware
func (sh *strictHandler) Ping(ctx *gin.Context) {
	var request PingRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Ping(ctx, request.(PingRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Ping")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PingResponseObject); ok {
		if err := validResponse.VisitPingResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// HintPermissions operation middleware
func (sh *strictHandler) HintPermissions(ctx *gin.Context, params HintPermissionsParams) {
	var request HintPermissionsRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.HintPermissions(ctx, request.(HintPermissionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "HintPermissions")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(HintPermissionsResponseObject); ok {
		if err := validResponse.VisitHintPermissionsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// HintRoles operation middleware
func (sh *strictHandler) HintRoles(ctx *gin.Context, params HintRolesParams) {
	var request HintRolesRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.HintRoles(ctx, request.(HintRolesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "HintRoles")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(HintRolesResponseObject); ok {
		if err := validResponse.VisitHintRolesResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// HintUsers operation middleware
func (sh *strictHandler) HintUsers(ctx *gin.Context, params HintUsersParams) {
	var request HintUsersRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.HintUsers(ctx, request.(HintUsersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "HintUsers")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(HintUsersResponseObject); ok {
		if err := validResponse.VisitHintUsersResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteRole operation middleware
func (sh *strictHandler) DeleteRole(ctx *gin.Context, id uint32) {
	var request DeleteRoleRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteRole(ctx, request.(DeleteRoleRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteRole")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteRoleResponseObject); ok {
		if err := validResponse.VisitDeleteRoleResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ReadRole operation middleware
func (sh *strictHandler) ReadRole(ctx *gin.Context, id uint32) {
	var request ReadRoleRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ReadRole(ctx, request.(ReadRoleRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ReadRole")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ReadRoleResponseObject); ok {
		if err := validResponse.VisitReadRoleResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateRole operation middleware
func (sh *strictHandler) UpdateRole(ctx *gin.Context, id uint32) {
	var request UpdateRoleRequestObject

	request.Id = id

	var body UpdateRoleJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusUnprocessableEntity)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateRole(ctx, request.(UpdateRoleRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateRole")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(UpdateRoleResponseObject); ok {
		if err := validResponse.VisitUpdateRoleResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListRolePermissions operation middleware
func (sh *strictHandler) ListRolePermissions(ctx *gin.Context, id uint32, params ListRolePermissionsParams) {
	var request ListRolePermissionsRequestObject

	request.Id = id
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ListRolePermissions(ctx, request.(ListRolePermissionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListRolePermissions")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ListRolePermissionsResponseObject); ok {
		if err := validResponse.VisitListRolePermissionsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// AssignPermissions operation middleware
func (sh *strictHandler) AssignPermissions(ctx *gin.Context, id uint32) {
	var request AssignPermissionsRequestObject

	request.Id = id

	var body AssignPermissionsJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusUnprocessableEntity)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AssignPermissions(ctx, request.(AssignPermissionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AssignPermissions")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(AssignPermissionsResponseObject); ok {
		if err := validResponse.VisitAssignPermissionsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListRoleUsers operation middleware
func (sh *strictHandler) ListRoleUsers(ctx *gin.Context, id uint32, params ListRoleUsersParams) {
	var request ListRoleUsersRequestObject

	request.Id = id
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ListRoleUsers(ctx, request.(ListRoleUsersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListRoleUsers")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ListRoleUsersResponseObject); ok {
		if err := validResponse.VisitListRoleUsersResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListRole operation middleware
func (sh *strictHandler) ListRole(ctx *gin.Context, params ListRoleParams) {
	var request ListRoleRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ListRole(ctx, request.(ListRoleRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListRole")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ListRoleResponseObject); ok {
		if err := validResponse.VisitListRoleResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateRole operation middleware
func (sh *strictHandler) CreateRole(ctx *gin.Context) {
	var request CreateRoleRequestObject

	var body CreateRoleJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusUnprocessableEntity)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateRole(ctx, request.(CreateRoleRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateRole")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateRoleResponseObject); ok {
		if err := validResponse.VisitCreateRoleResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteUser operation middleware
func (sh *strictHandler) DeleteUser(ctx *gin.Context, id uint64, params DeleteUserParams) {
	var request DeleteUserRequestObject

	request.Id = id
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteUser(ctx, request.(DeleteUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteUser")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteUserResponseObject); ok {
		if err := validResponse.VisitDeleteUserResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ReadUser operation middleware
func (sh *strictHandler) ReadUser(ctx *gin.Context, id uint64, params ReadUserParams) {
	var request ReadUserRequestObject

	request.Id = id
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ReadUser(ctx, request.(ReadUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ReadUser")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ReadUserResponseObject); ok {
		if err := validResponse.VisitReadUserResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateUser operation middleware
func (sh *strictHandler) UpdateUser(ctx *gin.Context, id uint64) {
	var request UpdateUserRequestObject

	request.Id = id

	var body UpdateUserJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusUnprocessableEntity)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateUser(ctx, request.(UpdateUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateUser")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(UpdateUserResponseObject); ok {
		if err := validResponse.VisitUpdateUserResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// RestoreUser operation middleware
func (sh *strictHandler) RestoreUser(ctx *gin.Context, id uint64) {
	var request RestoreUserRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.RestoreUser(ctx, request.(RestoreUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RestoreUser")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(RestoreUserResponseObject); ok {
		if err := validResponse.VisitRestoreUserResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListUserRoles operation middleware
func (sh *strictHandler) ListUserRoles(ctx *gin.Context, id uint64, params ListUserRolesParams) {
	var request ListUserRolesRequestObject

	request.Id = id
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ListUserRoles(ctx, request.(ListUserRolesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListUserRoles")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ListUserRolesResponseObject); ok {
		if err := validResponse.VisitListUserRolesResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// AssignRoles operation middleware
func (sh *strictHandler) AssignRoles(ctx *gin.Context, id uint64) {
	var request AssignRolesRequestObject

	request.Id = id

	var body AssignRolesJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusUnprocessableEntity)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AssignRoles(ctx, request.(AssignRolesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AssignRoles")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(AssignRolesResponseObject); ok {
		if err := validResponse.VisitAssignRolesResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListUser operation middleware
func (sh *strictHandler) ListUser(ctx *gin.Context, params ListUserParams) {
	var request ListUserRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ListUser(ctx, request.(ListUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListUser")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ListUserResponseObject); ok {
		if err := validResponse.VisitListUserResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateUser operation middleware
func (sh *strictHandler) CreateUser(ctx *gin.Context) {
	var request CreateUserRequestObject

	var body CreateUserJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusUnprocessableEntity)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateUser(ctx, request.(CreateUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateUser")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateUserResponseObject); ok {
		if err := validResponse.VisitCreateUserResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xd6W/cuBX/Vwi1QFtA8Zlsd/3NiVs0gLEIknX7YREYtPRmhhsNqZCUjwbzvy9ISiPq",
	"psayZ8bmpyQTno/v+L2D1I8gYsuUUaBSBGc/Ag4iZVSA/sfboyP1R8SoBCrVX3GaJiTCkjB6+IdgVP0m",
	"ogUssfpbylkKXBLTO2IxqD/lQwrBWUCohDnwYBUGwDnjqs0qDITEMhNWOyE5ofNgtQoDDt8zwiEOzn43",
	"o62bfw2L5uzmD4hksFLtYxARJ6lanZ7wFickRoSmmQxRjCVG+W9qEW+Pjvd4c1cUZ3LBOPk/5Ls53euj",
	"EtlsRiICVKIU+JIIQRgVZmdv93hnHATLeASIMolmLKP5af2yx3uKGJ0lJJKEzlGxP3NUJyd7LVIpZxEI",
	"gW8SQP+iksgHNfu7vdaCGYX7FCIJMdIT6iHNYvV855Ha8m/sG9CWxXPAEuJrrLc9Y3yp/hbEWMIbSZZq",
	"KbX1hgGJK20zQuVPb4MwWBJKltkyODsOW4jB7ihw1fGvHGbBWfCXw9IuHebLPbwSpnEmgF9vMk+NmiQO",
	"ysGaxAyDT2tVNA1tKkfzI1ji+0ugc7kIzk7evXOj5enJIC0pXkLb8EtCi38ft0zGWWJ2RiQsxdBZfGYJ",
	"qF75MJhzrKUlS+ORZGk7FL2F/hP5oOn/Cs7l2Sh6SYT09JyOnp8Bx56e09HzSk/kKToBRQWjOJnQ6NfI",
	"2WKVuylw8oJARJUSg8R/Qhu2pSOQBU81mfrp6V1MP0j3J7N0W6L6LvDyk1m710VTjatfvomzgzyuLofl",
	"jU3ieJhjcZ+/sBzVmUeZXnW63nGZBsYoWnqXZSpKemdlKkp6N2U6Wl6XOl94WZ+MqsqSddATS8mbv8aQ",
	"ymEaiGy5xPwhOAsuIMVcLoFK9PEiaKNOAreQNIb8uXPELxBlnMgH9CHBHGgE6FKPMIi/9NKL+doosgkH",
	"wRKT6urNL9Ohzw3RjAPTnTgx0HqwNpJpJNRkHZ1KuNY+mDuqshMQLbDO8+NO8GOau3pjT7caa2o5Xw4z",
	"DmIxMddsK5fx3ELY5Ut4qfFa3ImBPAjw7PMI9mn3Gj37uHkhCZR9qlUbF1gCwjRGqjO6WwBFcgGIQ8R4",
	"jO6wQHnvIGyfjWZJgm8SCM4kz8Azbxvzdjnqnn299nNioGsFHH1cYoK4hGpL6Iw1NeE5EmSZJoBwJhdA",
	"ZV53hwTwWxIBYjO0eLjhJEbn788/aJ35+f35B7UaIpX+C7709Q/C4Ba4qfAKjg6ODo51IjkFilMSnAWn",
	"B0cHp0EYpFgu9LkeGi/3zTrRaRRxc+Gf4ZZ9AxRlnCsdYLoh3U2vMnd8zC+BnpPrpX2M171tLyes1maf",
	"mLLY6pxfMt1hliXJA+J6iLgysyk+PepyiNYzHKpGZZH0UNtjqwR5qO2pVVPZ31Y10tWKaw3YQ1N14Hgu",
	"FKPZVPu6CoM5aJatEvjDAqJvj6KvriRXIvGSKPzffFPjaLwKq3JxmDO3VotMyDbpMNzfKh6ZMKXF/QKi",
	"//eREqLHeGky0k3Z3gNM2JzQ7hM7L/UnIIyUccz1mMw4RbjjnC71qMYSgJDvWfzwiGrqFAtxx3jcWWFS",
	"GLd+U7RuGZYjthulspfC0asGi40rDR/KLmt3qqWIu8K1liEr7n7sLbMa7ijYj2Wym/8+0kLhaldIHeHf",
	"RJ27G7ynhhytFxI2n0OMVN+dJJlemKJZWUVx+IPEqz44cqF/F5p2ZVIN3RG5yF1LLZ8Qo48XBw1Kmt5W",
	"AYYSHI6XIHUBxe+Nw7pQwKw6V6AgXnCmoVSBBM8MKqxKWWhJzDhwu/rqctb17dtbr/jWOyJb+Q2oobZv",
	"rZtFQ21/eQQDFpyEbT66eci93Ny8WMduQbDqOfyb0NiNIS1DIxCRBy1oAMe7z51hfSFXuR0qlqOUWrGQ",
	"7xnwh3Illskq5x/n4n59QutVq3pvsWGDUmfdjvMyV5M5JSqjBC7FMlo0Rc6EvGqyq4QrVU6wkAJFC0zn",
	"yk4wJCTjeA5NaTOj7Ik12Ax24jgm6r9w8skCoDOcCAgbgcFxUZvJrmeNDfw06hYHLw9aTFLuWbGGCQYF",
	"z4mPG/dA+tebh6teuj7Jr9wOtD05eYTuadMZXYqnCko1D7Sa/ksipDWcaOoY1cJdw9wtsEQpnoNiTg40",
	"7rSjqlHVho6y2Er4UMQyKsuZlPJE+bitUwK/bk6L7820heyPWMSvFmRIGxq1NvuWQUMtKm6CEoYcTWCu",
	"DpBmyxvg6O/Hb26wgPgfg2otxhJ3cBibIaMtw7EV5jqo31ISMiNcmOVfZzxpMbCfLxVjqJPRTQu+aKjz",
	"GWfLNic3hvty78Uhm6E07xGTCSyiO/nwawodtSaasOgi+SXO15jTfZDa67EG95/gnu1TuHccRrXsHEaj",
	"h0bv91gAUv9V0C9HAUH7RYQO0vxqGLHgIVvKB2qlONy67U21JCwTnfuTzJlHNLk3ZhHJJG5Z62/q50Ik",
	"LWnqG6z+ZIEt8sVEoa0US/bMxULvuyFrdd6rM1Gd8GGBLbWCcHkr4ROeE6oj+kmuPRpvkXjPpB6Oqlny",
	"HpekNaxnKtgUuqBw1+mVENnrkJhBKnDBA/8e4G/LZ09GthNcS4ZMftvBAzh+Ag8gL3vsX2Segd8duX1y",
	"WTRkaYjSAFjX9bl53m5kFLks7R0dSLaqgsdEDyrdHhlAGL7J6RpOrtPBR5Q3jyhbtGyJcVnn7xZXHmJR",
	"19DynvLrpPGX2mXvdvU7KAs+zusS5x0hBk09Phx4KQfojr24s/yLDr+8tghI7ZkMHwTxQRAfBHnNQRAi",
	"RAbGGVeqoVJz48Mi/WERy872AlnH4IiFCjaKj1RM+vOHSB79lI+IWFoLhjTVRc1aSdkm02SpwUpCbkHp",
	"CgERo7Gwr9M0gyunPx0dOVy2sB+kyhdsVuEYZbEOeWuBlsYbZYNL9eGWinD1gnXFqV0IXRemI2LsWXHL",
	"gQjEM0pVv7psfzI/OpQ4NsfafO+firLaw+9OCd/Cw8ZoBnfGBbSD68ZVnJNboAoPzMh9Y5//IVRW48y9",
	"LolUiEnpRMA8WnS4Bt97ne+pU6GTpCCbYljg/AZR97w2+HtGom/5+VW3ZdhuHRd3Zjjdw5HV9NWul8pk",
	"66ezRrOXIfoLYqx8Q4al1u/BObOU7uHIUvrVnZfKUuvHBEazlCH6C2KpfEOKpRR3jUqqKMkcl0vRj5c4",
	"h6Tz1rtRiF9u1idMNkyYaBLWA8T6kB3SI93M5pQV2RfOmy4Hsn4osUWp9TCzz3gMZjz6+Xiwml1337CO",
	"fYfZ+KWUsHS99vu4Qpa293tHv1c+uiZes9rWq+Gth0a71ugr4KevgM+lv6agKkjPvf4dS4mjBcTDhfBq",
	"nhGxj+fXVuGEGeFnzAK/7lxv6wO7Pt3r070+3fua071rs8Q10vEV8C6p3jZb3urJ5Hneqo0/F4LM6UYW",
	"nu++PzJV3brDcyxDL3tgTWio5p4UhshfAN7jEKThofaNVQFqf5S7ys46Zt0NSp1C2h6OejjqCkfLLxN4",
	"IOqBqAeiHogWQHSn0oQ7DUELo9wRpRow/brwodvi+5cYul5isJG4f4PhUTDAAwAPADwA8ADABgDe9vfY",
	"/qJasTPe1HevoJk8d7pOkKMBn6XeQpZ6owcc9Dlv50aB9d3broW98vsD3ZllxT6jaggV/h9XQ3hl3h11",
	"jOJdWa+UPuVt9gba/t8C5AK44mFCoySLAUmO9QPua4jZgr7zNm2hthvGEsDUtWCxpKwvWNywYFGTsF7o",
	"pTnKoWCxm7OdChY9mz9pdWTfC/Y9kuOrIwerI/uFZrA68qr4VsMG1ZG7KTPPUx35+j4ENuKjXtt4j1gz",
	"8tZrL61vx3Wt0ddeTl97meuWmvqrIGQ1kmQc+r47pBsgXHxLUS6w1GaoiAYlD0iwmbQ+sFgHEnqEHdaL",
	"g9du8q9ItlrjnILeIHd9XangnwKSGT4K6ow4nGhZR7d6Mi4aUrncRN0B2OprLHY/uVL7aqVPsfgUi0+x",
	"+BQLmFvYPs/iXGNRT7iUznhPge9IS57tvjO9i6W95pUP5RoKM9f+F/XWtlRAzQGA2VO76+K9vN5Knp7P",
	"sPlKnnFg08NMDzM9zPQw04aZHmH2IMx68W4DWPZV8jQTPU6VPDka8BmV7WZU7I+br1uvf6y8lfrPkwrS",
	"+PkZ8jPV76uPgz2bfn29JbOynfolNXV3/ZJe2CuvX+rIzqxWfwYAAP//AbfXHWKyAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
