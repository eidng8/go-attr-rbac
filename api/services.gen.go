// @formatter:off
// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Revoke current access token
	// (DELETE /access-token)
	RevokeAccessToken(c *gin.Context)
	// Validate current access token
	// (GET /access-token)
	CheckAccessToken(c *gin.Context)
	// Refresh current access token
	// (PATCH /access-token)
	RefreshAccessToken(c *gin.Context)
	// Login
	// (POST /login)
	Login(c *gin.Context)
	// Logout
	// (POST /logout)
	Logout(c *gin.Context)
	// Deletes a Permission by ID
	// (DELETE /permission/{id})
	DeletePermission(c *gin.Context, id uint32)
	// Find a Permission by ID
	// (GET /permission/{id})
	ReadPermission(c *gin.Context, id uint32, params ReadPermissionParams)
	// Updates a Permission
	// (PATCH /permission/{id})
	UpdatePermission(c *gin.Context, id uint32)
	// List Permissions
	// (GET /permissions)
	ListPermission(c *gin.Context, params ListPermissionParams)
	// Create a new Permission
	// (POST /permissions)
	CreatePermission(c *gin.Context)
	// List PersonalTokens
	// (GET /personal-tokens)
	ListPersonalToken(c *gin.Context, params ListPersonalTokenParams)
	// Create a new PersonalToken
	// (POST /personal-tokens)
	CreatePersonalToken(c *gin.Context)
	// Deletes a PersonalToken by ID
	// (DELETE /personal-tokens/{id})
	DeletePersonalToken(c *gin.Context, id uint64)
	// Find a PersonalToken by ID
	// (GET /personal-tokens/{id})
	ReadPersonalToken(c *gin.Context, id uint64)
	// Deletes a Role by ID
	// (DELETE /role/{id})
	DeleteRole(c *gin.Context, id uint32)
	// Find a Role by ID
	// (GET /role/{id})
	ReadRole(c *gin.Context, id uint32)
	// Updates a Role
	// (PATCH /role/{id})
	UpdateRole(c *gin.Context, id uint32)
	// List Roles
	// (GET /roles)
	ListRole(c *gin.Context, params ListRoleParams)
	// Create a new Role
	// (POST /roles)
	CreateRole(c *gin.Context)
	// List attached Permissions
	// (GET /roles/{id}/permissions)
	ListRolePermissions(c *gin.Context, id uint32, params ListRolePermissionsParams)
	// List attached Users
	// (GET /roles/{id}/users)
	ListRoleUsers(c *gin.Context, id uint32, params ListRoleUsersParams)
	// Deletes a User by ID
	// (DELETE /user/{id})
	DeleteUser(c *gin.Context, id uint64, params DeleteUserParams)
	// Find a User by ID
	// (GET /user/{id})
	ReadUser(c *gin.Context, id uint64, params ReadUserParams)
	// Updates a User
	// (PATCH /user/{id})
	UpdateUser(c *gin.Context, id uint64)
	// Restore a trashed record
	// (POST /user/{id}/restore)
	RestoreUser(c *gin.Context, id uint64)
	// List attached Roles
	// (GET /user/{id}/roles)
	ListUserRoles(c *gin.Context, id uint64, params ListUserRolesParams)
	// List Users
	// (GET /users)
	ListUser(c *gin.Context, params ListUserParams)
	// Create a new User
	// (POST /users)
	CreateUser(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// RevokeAccessToken operation middleware
func (siw *ServerInterfaceWrapper) RevokeAccessToken(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.RevokeAccessToken(c)
}

// CheckAccessToken operation middleware
func (siw *ServerInterfaceWrapper) CheckAccessToken(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CheckAccessToken(c)
}

// RefreshAccessToken operation middleware
func (siw *ServerInterfaceWrapper) RefreshAccessToken(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.RefreshAccessToken(c)
}

// Login operation middleware
func (siw *ServerInterfaceWrapper) Login(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.Login(c)
}

// Logout operation middleware
func (siw *ServerInterfaceWrapper) Logout(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.Logout(c)
}

// DeletePermission operation middleware
func (siw *ServerInterfaceWrapper) DeletePermission(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id uint32

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeletePermission(c, id)
}

// ReadPermission operation middleware
func (siw *ServerInterfaceWrapper) ReadPermission(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id uint32

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ReadPermissionParams

	// ------------- Optional query parameter "username" -------------

	err = runtime.BindQueryParameter("form", true, false, "username", c.Request.URL.Query(), &params.Username)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter username: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ReadPermission(c, id, params)
}

// UpdatePermission operation middleware
func (siw *ServerInterfaceWrapper) UpdatePermission(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id uint32

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdatePermission(c, id)
}

// ListPermission operation middleware
func (siw *ServerInterfaceWrapper) ListPermission(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListPermissionParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "per_page" -------------

	err = runtime.BindQueryParameter("form", true, false, "per_page", c.Request.URL.Query(), &params.PerPage)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter per_page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", c.Request.URL.Query(), &params.Name)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter name: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListPermission(c, params)
}

// CreatePermission operation middleware
func (siw *ServerInterfaceWrapper) CreatePermission(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreatePermission(c)
}

// ListPersonalToken operation middleware
func (siw *ServerInterfaceWrapper) ListPersonalToken(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListPersonalTokenParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "per_page" -------------

	err = runtime.BindQueryParameter("form", true, false, "per_page", c.Request.URL.Query(), &params.PerPage)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter per_page: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListPersonalToken(c, params)
}

// CreatePersonalToken operation middleware
func (siw *ServerInterfaceWrapper) CreatePersonalToken(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreatePersonalToken(c)
}

// DeletePersonalToken operation middleware
func (siw *ServerInterfaceWrapper) DeletePersonalToken(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id uint64

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeletePersonalToken(c, id)
}

// ReadPersonalToken operation middleware
func (siw *ServerInterfaceWrapper) ReadPersonalToken(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id uint64

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ReadPersonalToken(c, id)
}

// DeleteRole operation middleware
func (siw *ServerInterfaceWrapper) DeleteRole(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id uint32

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteRole(c, id)
}

// ReadRole operation middleware
func (siw *ServerInterfaceWrapper) ReadRole(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id uint32

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ReadRole(c, id)
}

// UpdateRole operation middleware
func (siw *ServerInterfaceWrapper) UpdateRole(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id uint32

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateRole(c, id)
}

// ListRole operation middleware
func (siw *ServerInterfaceWrapper) ListRole(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListRoleParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "per_page" -------------

	err = runtime.BindQueryParameter("form", true, false, "per_page", c.Request.URL.Query(), &params.PerPage)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter per_page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", c.Request.URL.Query(), &params.Name)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter name: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListRole(c, params)
}

// CreateRole operation middleware
func (siw *ServerInterfaceWrapper) CreateRole(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateRole(c)
}

// ListRolePermissions operation middleware
func (siw *ServerInterfaceWrapper) ListRolePermissions(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id uint32

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ListRolePermissionsParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "per_page" -------------

	err = runtime.BindQueryParameter("form", true, false, "per_page", c.Request.URL.Query(), &params.PerPage)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter per_page: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListRolePermissions(c, id, params)
}

// ListRoleUsers operation middleware
func (siw *ServerInterfaceWrapper) ListRoleUsers(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id uint32

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ListRoleUsersParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "per_page" -------------

	err = runtime.BindQueryParameter("form", true, false, "per_page", c.Request.URL.Query(), &params.PerPage)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter per_page: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListRoleUsers(c, id, params)
}

// DeleteUser operation middleware
func (siw *ServerInterfaceWrapper) DeleteUser(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id uint64

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteUserParams

	// ------------- Optional query parameter "trashed" -------------

	err = runtime.BindQueryParameter("form", true, false, "trashed", c.Request.URL.Query(), &params.Trashed)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter trashed: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteUser(c, id, params)
}

// ReadUser operation middleware
func (siw *ServerInterfaceWrapper) ReadUser(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id uint64

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ReadUserParams

	// ------------- Optional query parameter "trashed" -------------

	err = runtime.BindQueryParameter("form", true, false, "trashed", c.Request.URL.Query(), &params.Trashed)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter trashed: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ReadUser(c, id, params)
}

// UpdateUser operation middleware
func (siw *ServerInterfaceWrapper) UpdateUser(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id uint64

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateUser(c, id)
}

// RestoreUser operation middleware
func (siw *ServerInterfaceWrapper) RestoreUser(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id uint64

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.RestoreUser(c, id)
}

// ListUserRoles operation middleware
func (siw *ServerInterfaceWrapper) ListUserRoles(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id uint64

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ListUserRolesParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "per_page" -------------

	err = runtime.BindQueryParameter("form", true, false, "per_page", c.Request.URL.Query(), &params.PerPage)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter per_page: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListUserRoles(c, id, params)
}

// ListUser operation middleware
func (siw *ServerInterfaceWrapper) ListUser(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListUserParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "per_page" -------------

	err = runtime.BindQueryParameter("form", true, false, "per_page", c.Request.URL.Query(), &params.PerPage)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter per_page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", c.Request.URL.Query(), &params.Name)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter name: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListUser(c, params)
}

// CreateUser operation middleware
func (siw *ServerInterfaceWrapper) CreateUser(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateUser(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.DELETE(options.BaseURL+"/access-token", wrapper.RevokeAccessToken)
	router.GET(options.BaseURL+"/access-token", wrapper.CheckAccessToken)
	router.PATCH(options.BaseURL+"/access-token", wrapper.RefreshAccessToken)
	router.POST(options.BaseURL+"/login", wrapper.Login)
	router.POST(options.BaseURL+"/logout", wrapper.Logout)
	router.DELETE(options.BaseURL+"/permission/:id", wrapper.DeletePermission)
	router.GET(options.BaseURL+"/permission/:id", wrapper.ReadPermission)
	router.PATCH(options.BaseURL+"/permission/:id", wrapper.UpdatePermission)
	router.GET(options.BaseURL+"/permissions", wrapper.ListPermission)
	router.POST(options.BaseURL+"/permissions", wrapper.CreatePermission)
	router.GET(options.BaseURL+"/personal-tokens", wrapper.ListPersonalToken)
	router.POST(options.BaseURL+"/personal-tokens", wrapper.CreatePersonalToken)
	router.DELETE(options.BaseURL+"/personal-tokens/:id", wrapper.DeletePersonalToken)
	router.GET(options.BaseURL+"/personal-tokens/:id", wrapper.ReadPersonalToken)
	router.DELETE(options.BaseURL+"/role/:id", wrapper.DeleteRole)
	router.GET(options.BaseURL+"/role/:id", wrapper.ReadRole)
	router.PATCH(options.BaseURL+"/role/:id", wrapper.UpdateRole)
	router.GET(options.BaseURL+"/roles", wrapper.ListRole)
	router.POST(options.BaseURL+"/roles", wrapper.CreateRole)
	router.GET(options.BaseURL+"/roles/:id/permissions", wrapper.ListRolePermissions)
	router.GET(options.BaseURL+"/roles/:id/users", wrapper.ListRoleUsers)
	router.DELETE(options.BaseURL+"/user/:id", wrapper.DeleteUser)
	router.GET(options.BaseURL+"/user/:id", wrapper.ReadUser)
	router.PATCH(options.BaseURL+"/user/:id", wrapper.UpdateUser)
	router.POST(options.BaseURL+"/user/:id/restore", wrapper.RestoreUser)
	router.GET(options.BaseURL+"/user/:id/roles", wrapper.ListUserRoles)
	router.GET(options.BaseURL+"/users", wrapper.ListUser)
	router.POST(options.BaseURL+"/users", wrapper.CreateUser)
}

type N400JSONResponse struct {
	Code   int          `json:"code"`
	Errors *interface{} `json:"errors,omitempty"`
	Status string       `json:"status"`
}

type N401Response struct {
}

type N404JSONResponse struct {
	Code   int          `json:"code"`
	Errors *interface{} `json:"errors,omitempty"`
	Status string       `json:"status"`
}

type N409JSONResponse struct {
	Code   int          `json:"code"`
	Errors *interface{} `json:"errors,omitempty"`
	Status string       `json:"status"`
}

type N500JSONResponse struct {
	Code   int          `json:"code"`
	Errors *interface{} `json:"errors,omitempty"`
	Status string       `json:"status"`
}

type RevokeAccessTokenRequestObject struct {
}

type RevokeAccessTokenResponseObject interface {
	VisitRevokeAccessTokenResponse(w http.ResponseWriter) error
}

type RevokeAccessToken204Response struct {
}

func (response RevokeAccessToken204Response) VisitRevokeAccessTokenResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type RevokeAccessToken400JSONResponse struct{ N400JSONResponse }

func (response RevokeAccessToken400JSONResponse) VisitRevokeAccessTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type RevokeAccessToken401Response = N401Response

func (response RevokeAccessToken401Response) VisitRevokeAccessTokenResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type RevokeAccessToken500JSONResponse struct{ N500JSONResponse }

func (response RevokeAccessToken500JSONResponse) VisitRevokeAccessTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CheckAccessTokenRequestObject struct {
}

type CheckAccessTokenResponseObject interface {
	VisitCheckAccessTokenResponse(w http.ResponseWriter) error
}

type CheckAccessToken204Response struct {
}

func (response CheckAccessToken204Response) VisitCheckAccessTokenResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type CheckAccessToken400JSONResponse struct{ N400JSONResponse }

func (response CheckAccessToken400JSONResponse) VisitCheckAccessTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CheckAccessToken401Response = N401Response

func (response CheckAccessToken401Response) VisitCheckAccessTokenResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type CheckAccessToken500JSONResponse struct{ N500JSONResponse }

func (response CheckAccessToken500JSONResponse) VisitCheckAccessTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type RefreshAccessTokenRequestObject struct {
}

type RefreshAccessTokenResponseObject interface {
	VisitRefreshAccessTokenResponse(w http.ResponseWriter) error
}

type RefreshAccessToken204Response struct {
}

func (response RefreshAccessToken204Response) VisitRefreshAccessTokenResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type RefreshAccessToken400JSONResponse struct{ N400JSONResponse }

func (response RefreshAccessToken400JSONResponse) VisitRefreshAccessTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type RefreshAccessToken401Response = N401Response

func (response RefreshAccessToken401Response) VisitRefreshAccessTokenResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type RefreshAccessToken500JSONResponse struct{ N500JSONResponse }

func (response RefreshAccessToken500JSONResponse) VisitRefreshAccessTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type LoginRequestObject struct {
	Body *LoginJSONRequestBody
}

type LoginResponseObject interface {
	VisitLoginResponse(w http.ResponseWriter) error
}

type Login200JSONResponse UserRead

func (response Login200JSONResponse) VisitLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type Login400JSONResponse struct{ N400JSONResponse }

func (response Login400JSONResponse) VisitLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type Login401Response = N401Response

func (response Login401Response) VisitLoginResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type Login500JSONResponse struct{ N500JSONResponse }

func (response Login500JSONResponse) VisitLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type LogoutRequestObject struct {
}

type LogoutResponseObject interface {
	VisitLogoutResponse(w http.ResponseWriter) error
}

type Logout204Response struct {
}

func (response Logout204Response) VisitLogoutResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type Logout401Response = N401Response

func (response Logout401Response) VisitLogoutResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type Logout500JSONResponse struct{ N500JSONResponse }

func (response Logout500JSONResponse) VisitLogoutResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeletePermissionRequestObject struct {
	Id uint32 `json:"id"`
}

type DeletePermissionResponseObject interface {
	VisitDeletePermissionResponse(w http.ResponseWriter) error
}

type DeletePermission204Response struct {
}

func (response DeletePermission204Response) VisitDeletePermissionResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeletePermission400JSONResponse struct{ N400JSONResponse }

func (response DeletePermission400JSONResponse) VisitDeletePermissionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeletePermission401Response = N401Response

func (response DeletePermission401Response) VisitDeletePermissionResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type DeletePermission404JSONResponse struct{ N404JSONResponse }

func (response DeletePermission404JSONResponse) VisitDeletePermissionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeletePermission409JSONResponse struct{ N409JSONResponse }

func (response DeletePermission409JSONResponse) VisitDeletePermissionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type DeletePermission500JSONResponse struct{ N500JSONResponse }

func (response DeletePermission500JSONResponse) VisitDeletePermissionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ReadPermissionRequestObject struct {
	Id     uint32 `json:"id"`
	Params ReadPermissionParams
}

type ReadPermissionResponseObject interface {
	VisitReadPermissionResponse(w http.ResponseWriter) error
}

type ReadPermission200JSONResponse PermissionRead

func (response ReadPermission200JSONResponse) VisitReadPermissionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ReadPermission400JSONResponse struct{ N400JSONResponse }

func (response ReadPermission400JSONResponse) VisitReadPermissionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ReadPermission401Response = N401Response

func (response ReadPermission401Response) VisitReadPermissionResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ReadPermission404JSONResponse struct{ N404JSONResponse }

func (response ReadPermission404JSONResponse) VisitReadPermissionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ReadPermission409JSONResponse struct{ N409JSONResponse }

func (response ReadPermission409JSONResponse) VisitReadPermissionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type ReadPermission500JSONResponse struct{ N500JSONResponse }

func (response ReadPermission500JSONResponse) VisitReadPermissionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type UpdatePermissionRequestObject struct {
	Id   uint32 `json:"id"`
	Body *UpdatePermissionJSONRequestBody
}

type UpdatePermissionResponseObject interface {
	VisitUpdatePermissionResponse(w http.ResponseWriter) error
}

type UpdatePermission200JSONResponse PermissionUpdate

func (response UpdatePermission200JSONResponse) VisitUpdatePermissionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdatePermission400JSONResponse struct{ N400JSONResponse }

func (response UpdatePermission400JSONResponse) VisitUpdatePermissionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdatePermission401Response = N401Response

func (response UpdatePermission401Response) VisitUpdatePermissionResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type UpdatePermission404JSONResponse struct{ N404JSONResponse }

func (response UpdatePermission404JSONResponse) VisitUpdatePermissionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdatePermission409JSONResponse struct{ N409JSONResponse }

func (response UpdatePermission409JSONResponse) VisitUpdatePermissionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type UpdatePermission500JSONResponse struct{ N500JSONResponse }

func (response UpdatePermission500JSONResponse) VisitUpdatePermissionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ListPermissionRequestObject struct {
	Params ListPermissionParams
}

type ListPermissionResponseObject interface {
	VisitListPermissionResponse(w http.ResponseWriter) error
}

type ListPermission200JSONResponse struct {
	// CurrentPage Page number (1-based)
	CurrentPage int `json:"current_page"`

	// Data List of items
	Data []PermissionList `json:"data"`

	// FirstPageUrl URL to the first page
	FirstPageUrl string `json:"first_page_url"`

	// From Index (1-based) of the first item in the current page
	From int `json:"from"`

	// LastPage Last page number
	LastPage int `json:"last_page"`

	// LastPageUrl URL to the last page
	LastPageUrl string `json:"last_page_url"`

	// NextPageUrl URL to the next page
	NextPageUrl string `json:"next_page_url"`

	// Path Base path of the request
	Path string `json:"path"`

	// PerPage Number of items per page
	PerPage int `json:"per_page"`

	// PrevPageUrl URL to the previous page
	PrevPageUrl string `json:"prev_page_url"`

	// To Index (1-based) of the last item in the current page
	To int `json:"to"`

	// Total Total number of items
	Total int `json:"total"`
}

func (response ListPermission200JSONResponse) VisitListPermissionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListPermission400JSONResponse struct{ N400JSONResponse }

func (response ListPermission400JSONResponse) VisitListPermissionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ListPermission401Response = N401Response

func (response ListPermission401Response) VisitListPermissionResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ListPermission404JSONResponse struct{ N404JSONResponse }

func (response ListPermission404JSONResponse) VisitListPermissionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ListPermission409JSONResponse struct{ N409JSONResponse }

func (response ListPermission409JSONResponse) VisitListPermissionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type ListPermission500JSONResponse struct{ N500JSONResponse }

func (response ListPermission500JSONResponse) VisitListPermissionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreatePermissionRequestObject struct {
	Body *CreatePermissionJSONRequestBody
}

type CreatePermissionResponseObject interface {
	VisitCreatePermissionResponse(w http.ResponseWriter) error
}

type CreatePermission200JSONResponse PermissionCreate

func (response CreatePermission200JSONResponse) VisitCreatePermissionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreatePermission400JSONResponse struct{ N400JSONResponse }

func (response CreatePermission400JSONResponse) VisitCreatePermissionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreatePermission401Response = N401Response

func (response CreatePermission401Response) VisitCreatePermissionResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type CreatePermission409JSONResponse struct{ N409JSONResponse }

func (response CreatePermission409JSONResponse) VisitCreatePermissionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type CreatePermission500JSONResponse struct{ N500JSONResponse }

func (response CreatePermission500JSONResponse) VisitCreatePermissionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ListPersonalTokenRequestObject struct {
	Params ListPersonalTokenParams
}

type ListPersonalTokenResponseObject interface {
	VisitListPersonalTokenResponse(w http.ResponseWriter) error
}

type ListPersonalToken200JSONResponse struct {
	// CurrentPage Page number (1-based)
	CurrentPage int `json:"current_page"`

	// Data List of items
	Data []PersonalTokenList `json:"data"`

	// FirstPageUrl URL to the first page
	FirstPageUrl string `json:"first_page_url"`

	// From Index (1-based) of the first item in the current page
	From int `json:"from"`

	// LastPage Last page number
	LastPage int `json:"last_page"`

	// LastPageUrl URL to the last page
	LastPageUrl string `json:"last_page_url"`

	// NextPageUrl URL to the next page
	NextPageUrl string `json:"next_page_url"`

	// Path Base path of the request
	Path string `json:"path"`

	// PerPage Number of items per page
	PerPage int `json:"per_page"`

	// PrevPageUrl URL to the previous page
	PrevPageUrl string `json:"prev_page_url"`

	// To Index (1-based) of the last item in the current page
	To int `json:"to"`

	// Total Total number of items
	Total int `json:"total"`
}

func (response ListPersonalToken200JSONResponse) VisitListPersonalTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListPersonalToken400JSONResponse struct{ N400JSONResponse }

func (response ListPersonalToken400JSONResponse) VisitListPersonalTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ListPersonalToken401Response = N401Response

func (response ListPersonalToken401Response) VisitListPersonalTokenResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ListPersonalToken404JSONResponse struct{ N404JSONResponse }

func (response ListPersonalToken404JSONResponse) VisitListPersonalTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ListPersonalToken409JSONResponse struct{ N409JSONResponse }

func (response ListPersonalToken409JSONResponse) VisitListPersonalTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type ListPersonalToken500JSONResponse struct{ N500JSONResponse }

func (response ListPersonalToken500JSONResponse) VisitListPersonalTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreatePersonalTokenRequestObject struct {
	Body *CreatePersonalTokenJSONRequestBody
}

type CreatePersonalTokenResponseObject interface {
	VisitCreatePersonalTokenResponse(w http.ResponseWriter) error
}

type CreatePersonalToken200JSONResponse PersonalTokenCreate

func (response CreatePersonalToken200JSONResponse) VisitCreatePersonalTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreatePersonalToken400JSONResponse struct{ N400JSONResponse }

func (response CreatePersonalToken400JSONResponse) VisitCreatePersonalTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreatePersonalToken401Response = N401Response

func (response CreatePersonalToken401Response) VisitCreatePersonalTokenResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type CreatePersonalToken409JSONResponse struct{ N409JSONResponse }

func (response CreatePersonalToken409JSONResponse) VisitCreatePersonalTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type CreatePersonalToken500JSONResponse struct{ N500JSONResponse }

func (response CreatePersonalToken500JSONResponse) VisitCreatePersonalTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeletePersonalTokenRequestObject struct {
	Id uint64 `json:"id"`
}

type DeletePersonalTokenResponseObject interface {
	VisitDeletePersonalTokenResponse(w http.ResponseWriter) error
}

type DeletePersonalToken204Response struct {
}

func (response DeletePersonalToken204Response) VisitDeletePersonalTokenResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeletePersonalToken400JSONResponse struct{ N400JSONResponse }

func (response DeletePersonalToken400JSONResponse) VisitDeletePersonalTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeletePersonalToken401Response = N401Response

func (response DeletePersonalToken401Response) VisitDeletePersonalTokenResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type DeletePersonalToken404JSONResponse struct{ N404JSONResponse }

func (response DeletePersonalToken404JSONResponse) VisitDeletePersonalTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeletePersonalToken409JSONResponse struct{ N409JSONResponse }

func (response DeletePersonalToken409JSONResponse) VisitDeletePersonalTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type DeletePersonalToken500JSONResponse struct{ N500JSONResponse }

func (response DeletePersonalToken500JSONResponse) VisitDeletePersonalTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ReadPersonalTokenRequestObject struct {
	Id uint64 `json:"id"`
}

type ReadPersonalTokenResponseObject interface {
	VisitReadPersonalTokenResponse(w http.ResponseWriter) error
}

type ReadPersonalToken200JSONResponse PersonalTokenRead

func (response ReadPersonalToken200JSONResponse) VisitReadPersonalTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ReadPersonalToken400JSONResponse struct{ N400JSONResponse }

func (response ReadPersonalToken400JSONResponse) VisitReadPersonalTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ReadPersonalToken401Response = N401Response

func (response ReadPersonalToken401Response) VisitReadPersonalTokenResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ReadPersonalToken404JSONResponse struct{ N404JSONResponse }

func (response ReadPersonalToken404JSONResponse) VisitReadPersonalTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ReadPersonalToken409JSONResponse struct{ N409JSONResponse }

func (response ReadPersonalToken409JSONResponse) VisitReadPersonalTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type ReadPersonalToken500JSONResponse struct{ N500JSONResponse }

func (response ReadPersonalToken500JSONResponse) VisitReadPersonalTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteRoleRequestObject struct {
	Id uint32 `json:"id"`
}

type DeleteRoleResponseObject interface {
	VisitDeleteRoleResponse(w http.ResponseWriter) error
}

type DeleteRole204Response struct {
}

func (response DeleteRole204Response) VisitDeleteRoleResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteRole400JSONResponse struct{ N400JSONResponse }

func (response DeleteRole400JSONResponse) VisitDeleteRoleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteRole401Response = N401Response

func (response DeleteRole401Response) VisitDeleteRoleResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type DeleteRole404JSONResponse struct{ N404JSONResponse }

func (response DeleteRole404JSONResponse) VisitDeleteRoleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteRole409JSONResponse struct{ N409JSONResponse }

func (response DeleteRole409JSONResponse) VisitDeleteRoleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type DeleteRole500JSONResponse struct{ N500JSONResponse }

func (response DeleteRole500JSONResponse) VisitDeleteRoleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ReadRoleRequestObject struct {
	Id uint32 `json:"id"`
}

type ReadRoleResponseObject interface {
	VisitReadRoleResponse(w http.ResponseWriter) error
}

type ReadRole200JSONResponse RoleRead

func (response ReadRole200JSONResponse) VisitReadRoleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ReadRole400JSONResponse struct{ N400JSONResponse }

func (response ReadRole400JSONResponse) VisitReadRoleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ReadRole401Response = N401Response

func (response ReadRole401Response) VisitReadRoleResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ReadRole404JSONResponse struct{ N404JSONResponse }

func (response ReadRole404JSONResponse) VisitReadRoleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ReadRole409JSONResponse struct{ N409JSONResponse }

func (response ReadRole409JSONResponse) VisitReadRoleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type ReadRole500JSONResponse struct{ N500JSONResponse }

func (response ReadRole500JSONResponse) VisitReadRoleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type UpdateRoleRequestObject struct {
	Id   uint32 `json:"id"`
	Body *UpdateRoleJSONRequestBody
}

type UpdateRoleResponseObject interface {
	VisitUpdateRoleResponse(w http.ResponseWriter) error
}

type UpdateRole200JSONResponse RoleUpdate

func (response UpdateRole200JSONResponse) VisitUpdateRoleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateRole400JSONResponse struct{ N400JSONResponse }

func (response UpdateRole400JSONResponse) VisitUpdateRoleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdateRole401Response = N401Response

func (response UpdateRole401Response) VisitUpdateRoleResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type UpdateRole404JSONResponse struct{ N404JSONResponse }

func (response UpdateRole404JSONResponse) VisitUpdateRoleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateRole409JSONResponse struct{ N409JSONResponse }

func (response UpdateRole409JSONResponse) VisitUpdateRoleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type UpdateRole500JSONResponse struct{ N500JSONResponse }

func (response UpdateRole500JSONResponse) VisitUpdateRoleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ListRoleRequestObject struct {
	Params ListRoleParams
}

type ListRoleResponseObject interface {
	VisitListRoleResponse(w http.ResponseWriter) error
}

type ListRole200JSONResponse struct {
	// CurrentPage Page number (1-based)
	CurrentPage int `json:"current_page"`

	// Data List of items
	Data []RoleList `json:"data"`

	// FirstPageUrl URL to the first page
	FirstPageUrl string `json:"first_page_url"`

	// From Index (1-based) of the first item in the current page
	From int `json:"from"`

	// LastPage Last page number
	LastPage int `json:"last_page"`

	// LastPageUrl URL to the last page
	LastPageUrl string `json:"last_page_url"`

	// NextPageUrl URL to the next page
	NextPageUrl string `json:"next_page_url"`

	// Path Base path of the request
	Path string `json:"path"`

	// PerPage Number of items per page
	PerPage int `json:"per_page"`

	// PrevPageUrl URL to the previous page
	PrevPageUrl string `json:"prev_page_url"`

	// To Index (1-based) of the last item in the current page
	To int `json:"to"`

	// Total Total number of items
	Total int `json:"total"`
}

func (response ListRole200JSONResponse) VisitListRoleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListRole400JSONResponse struct{ N400JSONResponse }

func (response ListRole400JSONResponse) VisitListRoleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ListRole401Response = N401Response

func (response ListRole401Response) VisitListRoleResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ListRole404JSONResponse struct{ N404JSONResponse }

func (response ListRole404JSONResponse) VisitListRoleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ListRole409JSONResponse struct{ N409JSONResponse }

func (response ListRole409JSONResponse) VisitListRoleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type ListRole500JSONResponse struct{ N500JSONResponse }

func (response ListRole500JSONResponse) VisitListRoleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateRoleRequestObject struct {
	Body *CreateRoleJSONRequestBody
}

type CreateRoleResponseObject interface {
	VisitCreateRoleResponse(w http.ResponseWriter) error
}

type CreateRole200JSONResponse RoleCreate

func (response CreateRole200JSONResponse) VisitCreateRoleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateRole400JSONResponse struct{ N400JSONResponse }

func (response CreateRole400JSONResponse) VisitCreateRoleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateRole401Response = N401Response

func (response CreateRole401Response) VisitCreateRoleResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type CreateRole409JSONResponse struct{ N409JSONResponse }

func (response CreateRole409JSONResponse) VisitCreateRoleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type CreateRole500JSONResponse struct{ N500JSONResponse }

func (response CreateRole500JSONResponse) VisitCreateRoleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ListRolePermissionsRequestObject struct {
	Id     uint32 `json:"id"`
	Params ListRolePermissionsParams
}

type ListRolePermissionsResponseObject interface {
	VisitListRolePermissionsResponse(w http.ResponseWriter) error
}

type ListRolePermissions200JSONResponse struct {
	// CurrentPage Page number (1-based)
	CurrentPage int `json:"current_page"`

	// Data List of items
	Data []RolePermissionsList `json:"data"`

	// FirstPageUrl URL to the first page
	FirstPageUrl string `json:"first_page_url"`

	// From Index (1-based) of the first item in the current page
	From int `json:"from"`

	// LastPage Last page number
	LastPage int `json:"last_page"`

	// LastPageUrl URL to the last page
	LastPageUrl string `json:"last_page_url"`

	// NextPageUrl URL to the next page
	NextPageUrl string `json:"next_page_url"`

	// Path Base path of the request
	Path string `json:"path"`

	// PerPage Number of items per page
	PerPage int `json:"per_page"`

	// PrevPageUrl URL to the previous page
	PrevPageUrl string `json:"prev_page_url"`

	// To Index (1-based) of the last item in the current page
	To int `json:"to"`

	// Total Total number of items
	Total int `json:"total"`
}

func (response ListRolePermissions200JSONResponse) VisitListRolePermissionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListRolePermissions400JSONResponse struct{ N400JSONResponse }

func (response ListRolePermissions400JSONResponse) VisitListRolePermissionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ListRolePermissions401Response = N401Response

func (response ListRolePermissions401Response) VisitListRolePermissionsResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ListRolePermissions404JSONResponse struct{ N404JSONResponse }

func (response ListRolePermissions404JSONResponse) VisitListRolePermissionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ListRolePermissions409JSONResponse struct{ N409JSONResponse }

func (response ListRolePermissions409JSONResponse) VisitListRolePermissionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type ListRolePermissions500JSONResponse struct{ N500JSONResponse }

func (response ListRolePermissions500JSONResponse) VisitListRolePermissionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ListRoleUsersRequestObject struct {
	Id     uint32 `json:"id"`
	Params ListRoleUsersParams
}

type ListRoleUsersResponseObject interface {
	VisitListRoleUsersResponse(w http.ResponseWriter) error
}

type ListRoleUsers200JSONResponse struct {
	// CurrentPage Page number (1-based)
	CurrentPage int `json:"current_page"`

	// Data List of items
	Data []RoleUsersList `json:"data"`

	// FirstPageUrl URL to the first page
	FirstPageUrl string `json:"first_page_url"`

	// From Index (1-based) of the first item in the current page
	From int `json:"from"`

	// LastPage Last page number
	LastPage int `json:"last_page"`

	// LastPageUrl URL to the last page
	LastPageUrl string `json:"last_page_url"`

	// NextPageUrl URL to the next page
	NextPageUrl string `json:"next_page_url"`

	// Path Base path of the request
	Path string `json:"path"`

	// PerPage Number of items per page
	PerPage int `json:"per_page"`

	// PrevPageUrl URL to the previous page
	PrevPageUrl string `json:"prev_page_url"`

	// To Index (1-based) of the last item in the current page
	To int `json:"to"`

	// Total Total number of items
	Total int `json:"total"`
}

func (response ListRoleUsers200JSONResponse) VisitListRoleUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListRoleUsers400JSONResponse struct{ N400JSONResponse }

func (response ListRoleUsers400JSONResponse) VisitListRoleUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ListRoleUsers401Response = N401Response

func (response ListRoleUsers401Response) VisitListRoleUsersResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ListRoleUsers404JSONResponse struct{ N404JSONResponse }

func (response ListRoleUsers404JSONResponse) VisitListRoleUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ListRoleUsers409JSONResponse struct{ N409JSONResponse }

func (response ListRoleUsers409JSONResponse) VisitListRoleUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type ListRoleUsers500JSONResponse struct{ N500JSONResponse }

func (response ListRoleUsers500JSONResponse) VisitListRoleUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteUserRequestObject struct {
	Id     uint64 `json:"id"`
	Params DeleteUserParams
}

type DeleteUserResponseObject interface {
	VisitDeleteUserResponse(w http.ResponseWriter) error
}

type DeleteUser204Response struct {
}

func (response DeleteUser204Response) VisitDeleteUserResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteUser400JSONResponse struct{ N400JSONResponse }

func (response DeleteUser400JSONResponse) VisitDeleteUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteUser401Response = N401Response

func (response DeleteUser401Response) VisitDeleteUserResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type DeleteUser404JSONResponse struct{ N404JSONResponse }

func (response DeleteUser404JSONResponse) VisitDeleteUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteUser409JSONResponse struct{ N409JSONResponse }

func (response DeleteUser409JSONResponse) VisitDeleteUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type DeleteUser500JSONResponse struct{ N500JSONResponse }

func (response DeleteUser500JSONResponse) VisitDeleteUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ReadUserRequestObject struct {
	Id     uint64 `json:"id"`
	Params ReadUserParams
}

type ReadUserResponseObject interface {
	VisitReadUserResponse(w http.ResponseWriter) error
}

type ReadUser200JSONResponse UserRead

func (response ReadUser200JSONResponse) VisitReadUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ReadUser400JSONResponse struct{ N400JSONResponse }

func (response ReadUser400JSONResponse) VisitReadUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ReadUser401Response = N401Response

func (response ReadUser401Response) VisitReadUserResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ReadUser404JSONResponse struct{ N404JSONResponse }

func (response ReadUser404JSONResponse) VisitReadUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ReadUser409JSONResponse struct{ N409JSONResponse }

func (response ReadUser409JSONResponse) VisitReadUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type ReadUser500JSONResponse struct{ N500JSONResponse }

func (response ReadUser500JSONResponse) VisitReadUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type UpdateUserRequestObject struct {
	Id   uint64 `json:"id"`
	Body *UpdateUserJSONRequestBody
}

type UpdateUserResponseObject interface {
	VisitUpdateUserResponse(w http.ResponseWriter) error
}

type UpdateUser200JSONResponse UserUpdate

func (response UpdateUser200JSONResponse) VisitUpdateUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateUser400JSONResponse struct{ N400JSONResponse }

func (response UpdateUser400JSONResponse) VisitUpdateUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdateUser401Response = N401Response

func (response UpdateUser401Response) VisitUpdateUserResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type UpdateUser404JSONResponse struct{ N404JSONResponse }

func (response UpdateUser404JSONResponse) VisitUpdateUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateUser409JSONResponse struct{ N409JSONResponse }

func (response UpdateUser409JSONResponse) VisitUpdateUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type UpdateUser500JSONResponse struct{ N500JSONResponse }

func (response UpdateUser500JSONResponse) VisitUpdateUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type RestoreUserRequestObject struct {
	Id uint64 `json:"id"`
}

type RestoreUserResponseObject interface {
	VisitRestoreUserResponse(w http.ResponseWriter) error
}

type RestoreUser204Response struct {
}

func (response RestoreUser204Response) VisitRestoreUserResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type RestoreUser400JSONResponse struct{ N400JSONResponse }

func (response RestoreUser400JSONResponse) VisitRestoreUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type RestoreUser401Response = N401Response

func (response RestoreUser401Response) VisitRestoreUserResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type RestoreUser404JSONResponse struct{ N404JSONResponse }

func (response RestoreUser404JSONResponse) VisitRestoreUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type RestoreUser409JSONResponse struct{ N409JSONResponse }

func (response RestoreUser409JSONResponse) VisitRestoreUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type RestoreUser500JSONResponse struct{ N500JSONResponse }

func (response RestoreUser500JSONResponse) VisitRestoreUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ListUserRolesRequestObject struct {
	Id     uint64 `json:"id"`
	Params ListUserRolesParams
}

type ListUserRolesResponseObject interface {
	VisitListUserRolesResponse(w http.ResponseWriter) error
}

type ListUserRoles200JSONResponse struct {
	// CurrentPage Page number (1-based)
	CurrentPage int `json:"current_page"`

	// Data List of items
	Data []UserRolesList `json:"data"`

	// FirstPageUrl URL to the first page
	FirstPageUrl string `json:"first_page_url"`

	// From Index (1-based) of the first item in the current page
	From int `json:"from"`

	// LastPage Last page number
	LastPage int `json:"last_page"`

	// LastPageUrl URL to the last page
	LastPageUrl string `json:"last_page_url"`

	// NextPageUrl URL to the next page
	NextPageUrl string `json:"next_page_url"`

	// Path Base path of the request
	Path string `json:"path"`

	// PerPage Number of items per page
	PerPage int `json:"per_page"`

	// PrevPageUrl URL to the previous page
	PrevPageUrl string `json:"prev_page_url"`

	// To Index (1-based) of the last item in the current page
	To int `json:"to"`

	// Total Total number of items
	Total int `json:"total"`
}

func (response ListUserRoles200JSONResponse) VisitListUserRolesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListUserRoles400JSONResponse struct{ N400JSONResponse }

func (response ListUserRoles400JSONResponse) VisitListUserRolesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ListUserRoles401Response = N401Response

func (response ListUserRoles401Response) VisitListUserRolesResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ListUserRoles404JSONResponse struct{ N404JSONResponse }

func (response ListUserRoles404JSONResponse) VisitListUserRolesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ListUserRoles409JSONResponse struct{ N409JSONResponse }

func (response ListUserRoles409JSONResponse) VisitListUserRolesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type ListUserRoles500JSONResponse struct{ N500JSONResponse }

func (response ListUserRoles500JSONResponse) VisitListUserRolesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ListUserRequestObject struct {
	Params ListUserParams
}

type ListUserResponseObject interface {
	VisitListUserResponse(w http.ResponseWriter) error
}

type ListUser200JSONResponse struct {
	// CurrentPage Page number (1-based)
	CurrentPage int `json:"current_page"`

	// Data List of items
	Data []UserList `json:"data"`

	// FirstPageUrl URL to the first page
	FirstPageUrl string `json:"first_page_url"`

	// From Index (1-based) of the first item in the current page
	From int `json:"from"`

	// LastPage Last page number
	LastPage int `json:"last_page"`

	// LastPageUrl URL to the last page
	LastPageUrl string `json:"last_page_url"`

	// NextPageUrl URL to the next page
	NextPageUrl string `json:"next_page_url"`

	// Path Base path of the request
	Path string `json:"path"`

	// PerPage Number of items per page
	PerPage int `json:"per_page"`

	// PrevPageUrl URL to the previous page
	PrevPageUrl string `json:"prev_page_url"`

	// To Index (1-based) of the last item in the current page
	To int `json:"to"`

	// Total Total number of items
	Total int `json:"total"`
}

func (response ListUser200JSONResponse) VisitListUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListUser400JSONResponse struct{ N400JSONResponse }

func (response ListUser400JSONResponse) VisitListUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ListUser401Response = N401Response

func (response ListUser401Response) VisitListUserResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ListUser404JSONResponse struct{ N404JSONResponse }

func (response ListUser404JSONResponse) VisitListUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ListUser409JSONResponse struct{ N409JSONResponse }

func (response ListUser409JSONResponse) VisitListUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type ListUser500JSONResponse struct{ N500JSONResponse }

func (response ListUser500JSONResponse) VisitListUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateUserRequestObject struct {
	Body *CreateUserJSONRequestBody
}

type CreateUserResponseObject interface {
	VisitCreateUserResponse(w http.ResponseWriter) error
}

type CreateUser200JSONResponse UserCreate

func (response CreateUser200JSONResponse) VisitCreateUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateUser400JSONResponse struct{ N400JSONResponse }

func (response CreateUser400JSONResponse) VisitCreateUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateUser401Response = N401Response

func (response CreateUser401Response) VisitCreateUserResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type CreateUser409JSONResponse struct{ N409JSONResponse }

func (response CreateUser409JSONResponse) VisitCreateUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type CreateUser500JSONResponse struct{ N500JSONResponse }

func (response CreateUser500JSONResponse) VisitCreateUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Revoke current access token
	// (DELETE /access-token)
	RevokeAccessToken(ctx context.Context, request RevokeAccessTokenRequestObject) (RevokeAccessTokenResponseObject, error)
	// Validate current access token
	// (GET /access-token)
	CheckAccessToken(ctx context.Context, request CheckAccessTokenRequestObject) (CheckAccessTokenResponseObject, error)
	// Refresh current access token
	// (PATCH /access-token)
	RefreshAccessToken(ctx context.Context, request RefreshAccessTokenRequestObject) (RefreshAccessTokenResponseObject, error)
	// Login
	// (POST /login)
	Login(ctx context.Context, request LoginRequestObject) (LoginResponseObject, error)
	// Logout
	// (POST /logout)
	Logout(ctx context.Context, request LogoutRequestObject) (LogoutResponseObject, error)
	// Deletes a Permission by ID
	// (DELETE /permission/{id})
	DeletePermission(ctx context.Context, request DeletePermissionRequestObject) (DeletePermissionResponseObject, error)
	// Find a Permission by ID
	// (GET /permission/{id})
	ReadPermission(ctx context.Context, request ReadPermissionRequestObject) (ReadPermissionResponseObject, error)
	// Updates a Permission
	// (PATCH /permission/{id})
	UpdatePermission(ctx context.Context, request UpdatePermissionRequestObject) (UpdatePermissionResponseObject, error)
	// List Permissions
	// (GET /permissions)
	ListPermission(ctx context.Context, request ListPermissionRequestObject) (ListPermissionResponseObject, error)
	// Create a new Permission
	// (POST /permissions)
	CreatePermission(ctx context.Context, request CreatePermissionRequestObject) (CreatePermissionResponseObject, error)
	// List PersonalTokens
	// (GET /personal-tokens)
	ListPersonalToken(ctx context.Context, request ListPersonalTokenRequestObject) (ListPersonalTokenResponseObject, error)
	// Create a new PersonalToken
	// (POST /personal-tokens)
	CreatePersonalToken(ctx context.Context, request CreatePersonalTokenRequestObject) (CreatePersonalTokenResponseObject, error)
	// Deletes a PersonalToken by ID
	// (DELETE /personal-tokens/{id})
	DeletePersonalToken(ctx context.Context, request DeletePersonalTokenRequestObject) (DeletePersonalTokenResponseObject, error)
	// Find a PersonalToken by ID
	// (GET /personal-tokens/{id})
	ReadPersonalToken(ctx context.Context, request ReadPersonalTokenRequestObject) (ReadPersonalTokenResponseObject, error)
	// Deletes a Role by ID
	// (DELETE /role/{id})
	DeleteRole(ctx context.Context, request DeleteRoleRequestObject) (DeleteRoleResponseObject, error)
	// Find a Role by ID
	// (GET /role/{id})
	ReadRole(ctx context.Context, request ReadRoleRequestObject) (ReadRoleResponseObject, error)
	// Updates a Role
	// (PATCH /role/{id})
	UpdateRole(ctx context.Context, request UpdateRoleRequestObject) (UpdateRoleResponseObject, error)
	// List Roles
	// (GET /roles)
	ListRole(ctx context.Context, request ListRoleRequestObject) (ListRoleResponseObject, error)
	// Create a new Role
	// (POST /roles)
	CreateRole(ctx context.Context, request CreateRoleRequestObject) (CreateRoleResponseObject, error)
	// List attached Permissions
	// (GET /roles/{id}/permissions)
	ListRolePermissions(ctx context.Context, request ListRolePermissionsRequestObject) (ListRolePermissionsResponseObject, error)
	// List attached Users
	// (GET /roles/{id}/users)
	ListRoleUsers(ctx context.Context, request ListRoleUsersRequestObject) (ListRoleUsersResponseObject, error)
	// Deletes a User by ID
	// (DELETE /user/{id})
	DeleteUser(ctx context.Context, request DeleteUserRequestObject) (DeleteUserResponseObject, error)
	// Find a User by ID
	// (GET /user/{id})
	ReadUser(ctx context.Context, request ReadUserRequestObject) (ReadUserResponseObject, error)
	// Updates a User
	// (PATCH /user/{id})
	UpdateUser(ctx context.Context, request UpdateUserRequestObject) (UpdateUserResponseObject, error)
	// Restore a trashed record
	// (POST /user/{id}/restore)
	RestoreUser(ctx context.Context, request RestoreUserRequestObject) (RestoreUserResponseObject, error)
	// List attached Roles
	// (GET /user/{id}/roles)
	ListUserRoles(ctx context.Context, request ListUserRolesRequestObject) (ListUserRolesResponseObject, error)
	// List Users
	// (GET /users)
	ListUser(ctx context.Context, request ListUserRequestObject) (ListUserResponseObject, error)
	// Create a new User
	// (POST /users)
	CreateUser(ctx context.Context, request CreateUserRequestObject) (CreateUserResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// RevokeAccessToken operation middleware
func (sh *strictHandler) RevokeAccessToken(ctx *gin.Context) {
	var request RevokeAccessTokenRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.RevokeAccessToken(ctx, request.(RevokeAccessTokenRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RevokeAccessToken")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(RevokeAccessTokenResponseObject); ok {
		if err := validResponse.VisitRevokeAccessTokenResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CheckAccessToken operation middleware
func (sh *strictHandler) CheckAccessToken(ctx *gin.Context) {
	var request CheckAccessTokenRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CheckAccessToken(ctx, request.(CheckAccessTokenRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CheckAccessToken")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CheckAccessTokenResponseObject); ok {
		if err := validResponse.VisitCheckAccessTokenResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// RefreshAccessToken operation middleware
func (sh *strictHandler) RefreshAccessToken(ctx *gin.Context) {
	var request RefreshAccessTokenRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.RefreshAccessToken(ctx, request.(RefreshAccessTokenRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RefreshAccessToken")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(RefreshAccessTokenResponseObject); ok {
		if err := validResponse.VisitRefreshAccessTokenResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Login operation middleware
func (sh *strictHandler) Login(ctx *gin.Context) {
	var request LoginRequestObject

	var body LoginJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Login(ctx, request.(LoginRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Login")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(LoginResponseObject); ok {
		if err := validResponse.VisitLoginResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Logout operation middleware
func (sh *strictHandler) Logout(ctx *gin.Context) {
	var request LogoutRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Logout(ctx, request.(LogoutRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Logout")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(LogoutResponseObject); ok {
		if err := validResponse.VisitLogoutResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeletePermission operation middleware
func (sh *strictHandler) DeletePermission(ctx *gin.Context, id uint32) {
	var request DeletePermissionRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeletePermission(ctx, request.(DeletePermissionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeletePermission")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeletePermissionResponseObject); ok {
		if err := validResponse.VisitDeletePermissionResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ReadPermission operation middleware
func (sh *strictHandler) ReadPermission(ctx *gin.Context, id uint32, params ReadPermissionParams) {
	var request ReadPermissionRequestObject

	request.Id = id
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ReadPermission(ctx, request.(ReadPermissionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ReadPermission")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ReadPermissionResponseObject); ok {
		if err := validResponse.VisitReadPermissionResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdatePermission operation middleware
func (sh *strictHandler) UpdatePermission(ctx *gin.Context, id uint32) {
	var request UpdatePermissionRequestObject

	request.Id = id

	var body UpdatePermissionJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdatePermission(ctx, request.(UpdatePermissionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdatePermission")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(UpdatePermissionResponseObject); ok {
		if err := validResponse.VisitUpdatePermissionResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListPermission operation middleware
func (sh *strictHandler) ListPermission(ctx *gin.Context, params ListPermissionParams) {
	var request ListPermissionRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ListPermission(ctx, request.(ListPermissionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListPermission")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ListPermissionResponseObject); ok {
		if err := validResponse.VisitListPermissionResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreatePermission operation middleware
func (sh *strictHandler) CreatePermission(ctx *gin.Context) {
	var request CreatePermissionRequestObject

	var body CreatePermissionJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreatePermission(ctx, request.(CreatePermissionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreatePermission")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreatePermissionResponseObject); ok {
		if err := validResponse.VisitCreatePermissionResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListPersonalToken operation middleware
func (sh *strictHandler) ListPersonalToken(ctx *gin.Context, params ListPersonalTokenParams) {
	var request ListPersonalTokenRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ListPersonalToken(ctx, request.(ListPersonalTokenRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListPersonalToken")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ListPersonalTokenResponseObject); ok {
		if err := validResponse.VisitListPersonalTokenResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreatePersonalToken operation middleware
func (sh *strictHandler) CreatePersonalToken(ctx *gin.Context) {
	var request CreatePersonalTokenRequestObject

	var body CreatePersonalTokenJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreatePersonalToken(ctx, request.(CreatePersonalTokenRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreatePersonalToken")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreatePersonalTokenResponseObject); ok {
		if err := validResponse.VisitCreatePersonalTokenResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeletePersonalToken operation middleware
func (sh *strictHandler) DeletePersonalToken(ctx *gin.Context, id uint64) {
	var request DeletePersonalTokenRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeletePersonalToken(ctx, request.(DeletePersonalTokenRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeletePersonalToken")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeletePersonalTokenResponseObject); ok {
		if err := validResponse.VisitDeletePersonalTokenResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ReadPersonalToken operation middleware
func (sh *strictHandler) ReadPersonalToken(ctx *gin.Context, id uint64) {
	var request ReadPersonalTokenRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ReadPersonalToken(ctx, request.(ReadPersonalTokenRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ReadPersonalToken")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ReadPersonalTokenResponseObject); ok {
		if err := validResponse.VisitReadPersonalTokenResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteRole operation middleware
func (sh *strictHandler) DeleteRole(ctx *gin.Context, id uint32) {
	var request DeleteRoleRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteRole(ctx, request.(DeleteRoleRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteRole")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteRoleResponseObject); ok {
		if err := validResponse.VisitDeleteRoleResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ReadRole operation middleware
func (sh *strictHandler) ReadRole(ctx *gin.Context, id uint32) {
	var request ReadRoleRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ReadRole(ctx, request.(ReadRoleRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ReadRole")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ReadRoleResponseObject); ok {
		if err := validResponse.VisitReadRoleResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateRole operation middleware
func (sh *strictHandler) UpdateRole(ctx *gin.Context, id uint32) {
	var request UpdateRoleRequestObject

	request.Id = id

	var body UpdateRoleJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateRole(ctx, request.(UpdateRoleRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateRole")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(UpdateRoleResponseObject); ok {
		if err := validResponse.VisitUpdateRoleResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListRole operation middleware
func (sh *strictHandler) ListRole(ctx *gin.Context, params ListRoleParams) {
	var request ListRoleRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ListRole(ctx, request.(ListRoleRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListRole")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ListRoleResponseObject); ok {
		if err := validResponse.VisitListRoleResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateRole operation middleware
func (sh *strictHandler) CreateRole(ctx *gin.Context) {
	var request CreateRoleRequestObject

	var body CreateRoleJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateRole(ctx, request.(CreateRoleRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateRole")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateRoleResponseObject); ok {
		if err := validResponse.VisitCreateRoleResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListRolePermissions operation middleware
func (sh *strictHandler) ListRolePermissions(ctx *gin.Context, id uint32, params ListRolePermissionsParams) {
	var request ListRolePermissionsRequestObject

	request.Id = id
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ListRolePermissions(ctx, request.(ListRolePermissionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListRolePermissions")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ListRolePermissionsResponseObject); ok {
		if err := validResponse.VisitListRolePermissionsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListRoleUsers operation middleware
func (sh *strictHandler) ListRoleUsers(ctx *gin.Context, id uint32, params ListRoleUsersParams) {
	var request ListRoleUsersRequestObject

	request.Id = id
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ListRoleUsers(ctx, request.(ListRoleUsersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListRoleUsers")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ListRoleUsersResponseObject); ok {
		if err := validResponse.VisitListRoleUsersResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteUser operation middleware
func (sh *strictHandler) DeleteUser(ctx *gin.Context, id uint64, params DeleteUserParams) {
	var request DeleteUserRequestObject

	request.Id = id
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteUser(ctx, request.(DeleteUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteUser")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteUserResponseObject); ok {
		if err := validResponse.VisitDeleteUserResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ReadUser operation middleware
func (sh *strictHandler) ReadUser(ctx *gin.Context, id uint64, params ReadUserParams) {
	var request ReadUserRequestObject

	request.Id = id
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ReadUser(ctx, request.(ReadUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ReadUser")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ReadUserResponseObject); ok {
		if err := validResponse.VisitReadUserResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateUser operation middleware
func (sh *strictHandler) UpdateUser(ctx *gin.Context, id uint64) {
	var request UpdateUserRequestObject

	request.Id = id

	var body UpdateUserJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateUser(ctx, request.(UpdateUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateUser")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(UpdateUserResponseObject); ok {
		if err := validResponse.VisitUpdateUserResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// RestoreUser operation middleware
func (sh *strictHandler) RestoreUser(ctx *gin.Context, id uint64) {
	var request RestoreUserRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.RestoreUser(ctx, request.(RestoreUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RestoreUser")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(RestoreUserResponseObject); ok {
		if err := validResponse.VisitRestoreUserResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListUserRoles operation middleware
func (sh *strictHandler) ListUserRoles(ctx *gin.Context, id uint64, params ListUserRolesParams) {
	var request ListUserRolesRequestObject

	request.Id = id
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ListUserRoles(ctx, request.(ListUserRolesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListUserRoles")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ListUserRolesResponseObject); ok {
		if err := validResponse.VisitListUserRolesResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListUser operation middleware
func (sh *strictHandler) ListUser(ctx *gin.Context, params ListUserParams) {
	var request ListUserRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ListUser(ctx, request.(ListUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListUser")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ListUserResponseObject); ok {
		if err := validResponse.VisitListUserResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateUser operation middleware
func (sh *strictHandler) CreateUser(ctx *gin.Context) {
	var request CreateUserRequestObject

	var body CreateUserJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateUser(ctx, request.(CreateUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateUser")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateUserResponseObject); ok {
		if err := validResponse.VisitCreateUserResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xdW2/cONL9K4S+D9hdQLGd2wLjNyfGAgGMQeAZ7z4MAoOWqrs5UZMakvJlg/7vC5JS",
	"i5KoW1/c3RGf4tgUSR1W1TliFaUfQcSWKaNApQgufwQcRMqoAP2fDxcX6p+IUQlUqh9xmiYkwpIwev6n",
	"YFT9TkQLWGL1U8pZClwSc3XEYlD/ypcUgsuAUAlz4MEqDIBzxlWbVRgIiWUmrHZCckLnwWoVBhz+ygiH",
	"OLj8w/S2bv4tLJqzhz8hksFKtY9BRJykanZ6wEeckBgRmmYyRDGWGOW/U5P4cPFWjVq95o7iTC4YJ/+F",
	"vNGHE0aAg2AZjwBRJtGMZTS/p19O+J4iRmcJiSShc1Tcn1DDfzxpY80oPKcQSYiRHlB3aSarx7uKIhDi",
	"d/YdqGPyHLCE+B7r254xvlQ/BTGW8EaSpZpKbb5hQOJK24xQ+c8PQRgsCSXLbBlcvg0dYLAnClxd+P8c",
	"ZsFl8H/nZfg4z6d7fidM40wAv99knBqaJA7KzppghsFX4EsiBGE7wqayND8GYff+XS92FC/B2R1niZkr",
	"kbAUfejesgTUVXk3mHP8otFO45E36oJZT7Ib488a0ZNE+tUwuiFCeoS6ELoFHHuEuhC60wN5jJwYCUZx",
	"skM6rAHk4Cv8bJB49/GjE5fTp9YqCr3A75EHDgD/MSC6N9aYKJ5745jp4KnV5ilSULrm0eHS2nqO2InA",
	"NkAPH7+I7tWRR1GjWi8v0LvQ8dK8HRsvytux8XK8C537MnYK72EdOKkYv0OEYIlJUmlufrM73bEh6xUg",
	"L/HzDdC5XJTSaP3/QXCuO3NBqhmzASTWm6X3UmnA4exrb7E66P8oVyfN5e7Ye60+QTvulsOMg1jsGMND",
	"7XS+tknuUoF5D+c+XO4QzF1qvATKa6r5rGssAWEaI3UxeloARXIBiEPEeIyesED51UHoHo1mSYIf1MOn",
	"5Bn4pXQt5S4lqYeT3yvC8erViZBqS+iMNT39CgmyTBNAOJMLoDLPuCMB/JFEgNgMLV4eOInR1aerzzom",
	"3H66+qxmQ6Ty7+C3ruuDMHgEbnK7wcXZxdlbvVmeAsUpCS6D92cXZ++DMEixXOiVOjfq740skgMm0DQn",
	"fguP7DugKOMcqETmMqQv07PMJZD5TaDH5HpqX+L11bbeCavFM+9M6Uh1zN8yfcEsS5IXxHUXcWVkU6Bx",
	"0SaN1iOcq0ZlFUtf27dWhUR3W9VI1x5kyyXmL904qUXEc6GMx0bi2yoM5qDNsAra5wVE37fCTJfvKDM/",
	"dtT+nU90LG4pltHCZazGGJ3WmglTDdNtr/qvWxqs7uMUTLYdrVbsV2FwnrA5MRlFJhyq5qoMUYAwUoyS",
	"hwqZcYpwC/Y3ulcTbEHITyx+2aJUKcVCPDEeu0nAYszuaL9uGZY9uuN+eZWSYquG2Yyru+rbANf61FEh",
	"VbFEiyuKQr2jMkCz4oVJsUy229QXWsQ0rZDVsvxN1C22YU+qy9H+m7D5HGKkrn01GPRgCocyIXP+g8Sr",
	"Lma+1r8XGo9yXxE9EbnInyK0H0GMvlyfNdAxV1u5HGXgHC9B6lzMH40FuFYapTpWoNROcKlVRSGKLo1A",
	"qnpDaFn2OCW3+jZk/eq3b9965TFqjz6QF8H2tf1gFZf2tf1lC6MqrAPbtvHwgr5cW6HdWkpLjVSx/Reh",
	"8TAjs4K8QESeOdgVx8dvcWGj3DnngGI6KvgUE/krA/5SzsSii3L8cc9k3/bIHLXCMgd/9HqSVSA9CT9S",
	"5j/KiVqkqdmFqPmjcphUPbcJKVC0wHSu4jlDQjKO59D0INPLiUTtzWQcjmOi/oSTr5agm+FEQFjTeH1b",
	"ByNqicfuLzSKD3pr161lL+9CLbbZkQheU0E2yie755vvmUzI613e2ubyVdmm18pJpDdESKs70fRu1WK4",
	"bz8tsEQpnoMyIg40bmUl1ajKSKP4TzkJilhGZTmSClso79c5JPD75rB95V8dk/jVIuC0Ectqox+Ygmub",
	"oubx2sDRlK5qAWm2fACO/v72zQMWEP+jN/zEWOIWC2MzZKJaOLacS+/pOjKJM8KFmf59xhMHtd3eKMNQ",
	"K6ObFnbRCLszzpauR7sYnst7LxbZdKVtj5i0SLFPkXe/RujChVCCRRvkNzifY457L9rrvnrvP8Edt0/h",
	"eWA3qmVrN5q3G1d/wgKQ+lOBX86/zh4K52z08qsxxMKGbC/vSbFzeBx2b6olYZlovT/JBtuIhntjE5FM",
	"Ysdcf1e/LlzS8qauzuon22yXLwYK7aBYmmfuFvq+G75Wt726EdWBDwtVpwPEkCN1X/GcUL1VnOTRw+ay",
	"6TB+nZ07BL5zg8oUMyjFQOGpVeMT2SnvTScVCTAxGW17UUeSrVWqSoZMEvJAejqvaemeZJ4m3a937d1j",
	"zK02DL5HJuuCqjdlwVSnVC6rr9rVslWhNWXBPDXNWjsP5GWrl61etk5ZthIhMjBSS4WGSm5wikLW4s4q",
	"JVuEOULOlldtpmgrNP0KovbQ5xfXB5UPdYRx6OlFp1K1Vvtgirpxhrp3qj+nrq54TpsfO9T12AICC8ix",
	"NQTDNXglIVW5bMucVL97DK0kqOPgiwmqxQQWPo5UaI1d+ksK+sxuaFXBidrgnkJmR36/176nm+IfYdoq",
	"4HKWwKgoe8sSGBdc9emuwfactz6OoqzyZn0EtSKohqVuXXrhBsTLdgMaFCZPxZp2FxTX5/UdsbDDQCca",
	"Artts7eySV++YU3TEZvm8SZg2l7fsl0axvVClrFPsePro7TxHLwyynqHRdscp1wNlftdLTQUWqgnoaMP",
	"DrrzOEO8f7r1TtyKdr7SaeOs0fq9Rj5Z5JNFPlk05WQRlhJHC4iRoa2JZYc0ETsV/oBcUFPkD0oB5Qzv",
	"1fRO1PRGZVJ65Q6TzrFeuNg2sZ8wedOjlvXW4fCjA+uY1XuGQA1ULWU8ssfqcIfa/hX1/LSLrpwvMPRS",
	"2ktpL6W9lM6l9JQPD7j4uZf919pwAO/rl6K2M77+s+d6z/W74vryJbye5T3Le5b3LF+wvGGtqfJ7QbQO",
	"ZlfAjKoIUn2Nqwi6M2+fGcjyd9a7avZZ2NYg4v8sQC6AKwcnNEqyGJDkWL8Wb81EDi7O27io+IGxBDAd",
	"Wn5UIuvLj6zyIw1LvcRDW8mA8qN2ax1UfuRNd6+1Tl3vBezwhonWOnU7Qm+t013xVssNap2O0w9ep9ap",
	"/asT2yVFRr2bu+uDENtOo+ObEFt3vePz9tu9OrxXRWoXOXhFl/UK+LY5TrmiK48utQBY0bKqJ8k4tL+d",
	"9dY0QLj4dIFcYKnJpXiwS16QYDNpfc+gLg90D0ccGXvL3fOPNjg5NkdwSiZW2kQhnoxtBHXj6i8cXD95",
	"dVQQavGT1zUcu8D0O6DHvwNa+9SF3wH1O6B+B9TvgEJsvmcwybrBKg+3q8YeOu/IYw7Rf9M9B9Dx4nF/",
	"DmActXtS96TuSd2Tuk3qk+PzeiKz3P0ecA6guQE+6BxAzvB+p9nvNG/0kcqO71O27O4e5sSD9YHjton9",
	"hCceWnaTV6v/BQAA//8ck1V9QpUAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
