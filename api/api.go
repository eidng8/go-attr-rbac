package api

import (
    "context"
    "encoding/base64"
    "errors"
    "net/url"
    "os"
    "strings"

    "github.com/eidng8/go-utils"
    "github.com/getkin/kin-openapi/openapi3"
    "github.com/gin-gonic/gin"
    "github.com/golang-jwt/jwt/v5"
    jsoniter "github.com/json-iterator/go"

    "github.com/eidng8/go-attr-rbac/ent"
)

var (
    json = jsoniter.ConfigCompatibleWithStandardLibrary

    ErrInvalidContext = errors.New("invalid_context")
)

func NewEngine(entClient *ent.Client) (*Server, *gin.Engine, error) {
    key, err := getSecret()
    if err != nil {
        return nil, nil, err
    }
    swagger, err := GetSwagger()
    if err != nil {
        return nil, nil, err
    }
    swagger.Servers = nil
    gin.SetMode(utils.GetEnvWithDefault(gin.EnvGinMode, gin.ReleaseMode))
    engine := gin.Default()
    server := NewApiServer(entClient, os.Getenv("BASE_URL"), key)
    handler := NewStrictHandler(server, []StrictMiddlewareFunc{})
    RegisterHandlers(engine, handler)
    // RegisterHandlersWithOptions(
    // 	engine, handler, GinServerOptions{
    // 		ErrorHandler: func(ctx *gin.Context, err error, code int) {
    // 			// This doesn't work since the error is generated by fmt.Errorf().
    // 			// Such error cannot be converted to err.ValidationError.
    // 			if ent.IsValidationError(err) {
    // 				code = http.StatusUnprocessableEntity
    // 			}
    // 			ctx.JSON(code, gin.H{"error": err.Error()})
    // 		},
    // 	},
    // )
    swagger.AddServer(
        &openapi3.Server{
            URL:         server.baseUrl,
            Description: "Hybrid RBAC and ABAC auth service",
        },
    )
    return server, engine, nil
}

func NewApiServer(db *ent.Client, baseUrl string, secret []byte) *Server {
    return &Server{db: db, baseUrl: baseUrl, secret: secret}
}

func getSecret() ([]byte, error) {
    secret := os.Getenv("PRIVATE_KEY")
    if secret == "" {
        return nil, errors.New("PRIVATE_KEY environment variable is not set")
    }
    key := make([]byte, 32)
    bytesRead, err := base64.NewDecoder(
        base64.StdEncoding, strings.NewReader(secret),
    ).Read(key)
    if err != nil {
        return nil, err
    }
    if bytesRead != 32 {
        return nil,
            errors.New("PRIVATE_KEY must be a 256-bit base64-encoded string")
    }
    return key, nil
}

func (s Server) Domain() string {
    u, err := url.Parse(s.baseUrl)
    if err != nil {
        return ""
    }
    return u.Hostname()
}

// getSecret returns the secret key for the JWT token generation.
// For use by `jwt.Parse()`.
func (s Server) getSecret(_ *jwt.Token) (interface{}, error) {
    return s.secret, nil
}

func (s Server) setCookie(
    gc *gin.Context, name, value, path string, maxAge int,
) {
    gc.SetCookie(name, value, maxAge, path, s.Domain(), true, true)
}

// verifyAccessToken verifies the access token from the cookie.
// Accesses database. Logs errors.
func (s Server) verifyAccessToken(gc *gin.Context) (*jwt.Token, error) {
    token, err := s.getToken(gc, AccessTokenName)
    if err != nil {
        return nil, err
    }
    if err = checkAccessToken(s, token); err != nil {
        return nil, err
    }
    return token, nil
}

// getToken gets token from the cookie. Doesn't access database. Logs errors.
func (s Server) getToken(gc *gin.Context, name string) (*jwt.Token, error) {
    cookie, err := gc.Cookie(name)
    if err != nil {
        log.Debugf("failed to get access token: %v", err)
        return nil, err
    }
    if "" == cookie {
        log.Debugf("failed to get access token: empty cookie")
        return nil, ErrEmptyToken
    }
    token, err := parseToken(s, cookie)
    if err != nil {
        log.Debugf("parse token error: %v", err)
        return nil, ErrInvalidToken
    }
    if err = isTokenExpired(token); err != nil {
        return nil, err
    }
    return token, nil
}

type Server struct {
    db      *ent.Client
    baseUrl string
    secret  []byte
}

func (s Server) DeletePermission(
    ctx context.Context, request DeletePermissionRequestObject,
) (DeletePermissionResponseObject, error) {
    // TODO implement me
    panic("implement me")
}

func (s Server) ReadPermission(
    ctx context.Context, request ReadPermissionRequestObject,
) (ReadPermissionResponseObject, error) {
    // TODO implement me
    panic("implement me")
}

func (s Server) UpdatePermission(
    ctx context.Context, request UpdatePermissionRequestObject,
) (UpdatePermissionResponseObject, error) {
    // TODO implement me
    panic("implement me")
}

func (s Server) RestorePermission(
    ctx context.Context, request RestorePermissionRequestObject,
) (RestorePermissionResponseObject, error) {
    // TODO implement me
    panic("implement me")
}

func (s Server) ListPermission(
    ctx context.Context, request ListPermissionRequestObject,
) (ListPermissionResponseObject, error) {
    // TODO implement me
    panic("implement me")
}

func (s Server) CreatePermission(
    ctx context.Context, request CreatePermissionRequestObject,
) (CreatePermissionResponseObject, error) {
    // TODO implement me
    panic("implement me")
}

func (s Server) CreatePersonalToken(
    ctx context.Context, request CreatePersonalTokenRequestObject,
) (CreatePersonalTokenResponseObject, error) {
    // TODO implement me
    panic("implement me")
}

func (s Server) DeletePersonalToken(
    ctx context.Context, request DeletePersonalTokenRequestObject,
) (DeletePersonalTokenResponseObject, error) {
    // TODO implement me
    panic("implement me")
}

func (s Server) ReadPersonalToken(
    ctx context.Context, request ReadPersonalTokenRequestObject,
) (ReadPersonalTokenResponseObject, error) {
    // TODO implement me
    panic("implement me")
}

func (s Server) DeleteRole(
    ctx context.Context, request DeleteRoleRequestObject,
) (DeleteRoleResponseObject, error) {
    // TODO implement me
    panic("implement me")
}

func (s Server) ReadRole(
    ctx context.Context, request ReadRoleRequestObject,
) (ReadRoleResponseObject, error) {
    // TODO implement me
    panic("implement me")
}

func (s Server) UpdateRole(
    ctx context.Context, request UpdateRoleRequestObject,
) (UpdateRoleResponseObject, error) {
    // TODO implement me
    panic("implement me")
}

func (s Server) RestoreRole(
    ctx context.Context, request RestoreRoleRequestObject,
) (RestoreRoleResponseObject, error) {
    // TODO implement me
    panic("implement me")
}

func (s Server) ListRole(
    ctx context.Context, request ListRoleRequestObject,
) (ListRoleResponseObject, error) {
    // TODO implement me
    panic("implement me")
}

func (s Server) CreateRole(
    ctx context.Context, request CreateRoleRequestObject,
) (CreateRoleResponseObject, error) {
    // TODO implement me
    panic("implement me")
}

func (s Server) ListRolePermissions(
    ctx context.Context, request ListRolePermissionsRequestObject,
) (ListRolePermissionsResponseObject, error) {
    // TODO implement me
    panic("implement me")
}

func (s Server) ListRoleUsers(
    ctx context.Context, request ListRoleUsersRequestObject,
) (ListRoleUsersResponseObject, error) {
    // TODO implement me
    panic("implement me")
}

func (s Server) DeleteUser(
    ctx context.Context, request DeleteUserRequestObject,
) (DeleteUserResponseObject, error) {
    // TODO implement me
    panic("implement me")
}

func (s Server) ReadUser(
    ctx context.Context, request ReadUserRequestObject,
) (ReadUserResponseObject, error) {
    // TODO implement me
    panic("implement me")
}

func (s Server) UpdateUser(
    ctx context.Context, request UpdateUserRequestObject,
) (UpdateUserResponseObject, error) {
    // TODO implement me
    panic("implement me")
}

func (s Server) RestoreUser(
    ctx context.Context, request RestoreUserRequestObject,
) (RestoreUserResponseObject, error) {
    // TODO implement me
    panic("implement me")
}

func (s Server) ListUser(
    ctx context.Context, request ListUserRequestObject,
) (ListUserResponseObject, error) {
    // TODO implement me
    panic("implement me")
}

func (s Server) CreateUser(
    ctx context.Context, request CreateUserRequestObject,
) (CreateUserResponseObject, error) {
    // TODO implement me
    panic("implement me")
}

var _ StrictServerInterface = (*Server)(nil)
