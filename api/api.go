package api

import (
	"encoding/base64"
	"errors"
	"net/url"
	"os"
	"strings"

	"github.com/eidng8/go-utils"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/golang-jwt/jwt/v5"
	jsoniter "github.com/json-iterator/go"

	"github.com/eidng8/go-attr-rbac/ent"
)

var (
	json = jsoniter.ConfigCompatibleWithStandardLibrary

	ErrInvalidContext = errors.New("invalid_context")
	ErrInvalidHeader  = errors.New("invalid_header")
)

func NewEngine(entClient *ent.Client) (*Server, *gin.Engine, error) {
	key, err := getSecret()
	if err != nil {
		return nil, nil, err
	}
	swagger, err := GetSwagger()
	if err != nil {
		return nil, nil, err
	}
	swagger.Servers = nil
	gin.SetMode(utils.GetEnvWithDefault(gin.EnvGinMode, gin.ReleaseMode))
	engine := gin.Default()
	server := NewApiServer(entClient, os.Getenv("BASE_URL"), key)
	handler := NewStrictHandler(
		server, []StrictMiddlewareFunc{server.authMiddleware()},
	)
	RegisterHandlers(engine, handler)
	// RegisterHandlersWithOptions(
	//     engine, handler, GinServerOptions{
	//         Middlewares: []MiddlewareFunc{server.authMiddleware()},
	//         // ErrorHandler: func(ctx *gin.Context, err error, code int) {
	//         // 	// This doesn't work since the error is generated by fmt.Errorf().
	//         // 	// Such error cannot be converted to err.ValidationError.
	//         // 	if ent.IsValidationError(err) {
	//         // 		code = http.StatusUnprocessableEntity
	//         // 	}
	//         // 	ctx.JSON(code, gin.H{"error": err.Error()})
	//         // },
	//     },
	// )
	swagger.AddServer(
		&openapi3.Server{
			URL:         server.baseUrl,
			Description: "Hybrid RBAC and ABAC auth service",
		},
	)
	// swagger.Security = *openapi3.NewSecurityRequirements()
	return server, engine, nil
}

func NewApiServer(db *ent.Client, baseUrl string, secret []byte) *Server {
	return &Server{db: db, baseUrl: baseUrl, secret: secret}
}

func getSecret() ([]byte, error) {
	secret := os.Getenv("PRIVATE_KEY")
	if secret == "" {
		return nil, errors.New("PRIVATE_KEY environment variable is not set")
	}
	key := make([]byte, 32)
	bytesRead, err := base64.NewDecoder(
		base64.StdEncoding, strings.NewReader(secret),
	).Read(key)
	if err != nil {
		return nil, err
	}
	if bytesRead != 32 {
		return nil,
			errors.New("PRIVATE_KEY must be a 256-bit base64-encoded string")
	}
	return key, nil
}

// Domain returns the domain name of base URL.
func (s Server) Domain() string {
	u, err := url.Parse(s.baseUrl)
	if err != nil {
		return ""
	}
	return u.Hostname()
}

// getSecret returns the secret key for the JWT token generation.
// For use by `jwt.Parse()`.
func (s Server) getSecret(_ *jwt.Token) (interface{}, error) {
	return s.secret, nil
}

func (s Server) setCookie(
	gc *gin.Context, name, value, path string, maxAge int,
) {
	gc.SetCookie(name, value, maxAge, path, s.Domain(), true, true)
}

type Server struct {
	db      *ent.Client
	baseUrl string
	secret  []byte
}

var _ StrictServerInterface = (*Server)(nil)
