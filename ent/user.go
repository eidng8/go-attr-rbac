// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/eidng8/go-attr-rbac/ent/user"
)

// User is the model entity for the User schema.
type User struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// Username holds the value of the "username" field.
	Username string `json:"username,omitempty"`
	// Email holds the value of the "email" field.
	Email *string `json:"email,omitempty"`
	// Password holds the value of the "password" field.
	Password string `json:"-"`
	// Attr holds the value of the "attr" field.
	Attr *map[string]interface{} `json:"attr,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserQuery when eager-loading is set.
	Edges        UserEdges `json:"-"`
	selectValues sql.SelectValues
}

// UserEdges holds the relations/edges for other nodes in the graph.
type UserEdges struct {
	// Roles holds the value of the roles edge.
	Roles []*Role `json:"roles,omitempty"`
	// AccessTokens holds the value of the access_tokens edge.
	AccessTokens []*AccessToken `json:"access_tokens,omitempty"`
	// RefreshTokens holds the value of the refresh_tokens edge.
	RefreshTokens []*AccessToken `json:"refresh_tokens,omitempty"`
	// PersonalTokens holds the value of the personal_tokens edge.
	PersonalTokens []*PersonalToken `json:"personal_tokens,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// RolesOrErr returns the Roles value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) RolesOrErr() ([]*Role, error) {
	if e.loadedTypes[0] {
		return e.Roles, nil
	}
	return nil, &NotLoadedError{edge: "roles"}
}

// AccessTokensOrErr returns the AccessTokens value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) AccessTokensOrErr() ([]*AccessToken, error) {
	if e.loadedTypes[1] {
		return e.AccessTokens, nil
	}
	return nil, &NotLoadedError{edge: "access_tokens"}
}

// RefreshTokensOrErr returns the RefreshTokens value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) RefreshTokensOrErr() ([]*AccessToken, error) {
	if e.loadedTypes[2] {
		return e.RefreshTokens, nil
	}
	return nil, &NotLoadedError{edge: "refresh_tokens"}
}

// PersonalTokensOrErr returns the PersonalTokens value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) PersonalTokensOrErr() ([]*PersonalToken, error) {
	if e.loadedTypes[3] {
		return e.PersonalTokens, nil
	}
	return nil, &NotLoadedError{edge: "personal_tokens"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*User) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case user.FieldAttr:
			values[i] = new([]byte)
		case user.FieldID:
			values[i] = new(sql.NullInt64)
		case user.FieldUsername, user.FieldEmail, user.FieldPassword:
			values[i] = new(sql.NullString)
		case user.FieldDeletedAt, user.FieldCreatedAt, user.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the User fields.
func (u *User) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case user.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			u.ID = uint64(value.Int64)
		case user.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				u.DeletedAt = new(time.Time)
				*u.DeletedAt = value.Time
			}
		case user.FieldUsername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field username", values[i])
			} else if value.Valid {
				u.Username = value.String
			}
		case user.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				u.Email = new(string)
				*u.Email = value.String
			}
		case user.FieldPassword:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field password", values[i])
			} else if value.Valid {
				u.Password = value.String
			}
		case user.FieldAttr:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field attr", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &u.Attr); err != nil {
					return fmt.Errorf("unmarshal field attr: %w", err)
				}
			}
		case user.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				u.CreatedAt = new(time.Time)
				*u.CreatedAt = value.Time
			}
		case user.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				u.UpdatedAt = new(time.Time)
				*u.UpdatedAt = value.Time
			}
		default:
			u.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the User.
// This includes values selected through modifiers, order, etc.
func (u *User) Value(name string) (ent.Value, error) {
	return u.selectValues.Get(name)
}

// QueryRoles queries the "roles" edge of the User entity.
func (u *User) QueryRoles() *RoleQuery {
	return NewUserClient(u.config).QueryRoles(u)
}

// QueryAccessTokens queries the "access_tokens" edge of the User entity.
func (u *User) QueryAccessTokens() *AccessTokenQuery {
	return NewUserClient(u.config).QueryAccessTokens(u)
}

// QueryRefreshTokens queries the "refresh_tokens" edge of the User entity.
func (u *User) QueryRefreshTokens() *AccessTokenQuery {
	return NewUserClient(u.config).QueryRefreshTokens(u)
}

// QueryPersonalTokens queries the "personal_tokens" edge of the User entity.
func (u *User) QueryPersonalTokens() *PersonalTokenQuery {
	return NewUserClient(u.config).QueryPersonalTokens(u)
}

// Update returns a builder for updating this User.
// Note that you need to call User.Unwrap() before calling this method if this User
// was returned from a transaction, and the transaction was committed or rolled back.
func (u *User) Update() *UserUpdateOne {
	return NewUserClient(u.config).UpdateOne(u)
}

// Unwrap unwraps the User entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (u *User) Unwrap() *User {
	_tx, ok := u.config.driver.(*txDriver)
	if !ok {
		panic("ent: User is not a transactional entity")
	}
	u.config.driver = _tx.drv
	return u
}

// String implements the fmt.Stringer.
func (u *User) String() string {
	var builder strings.Builder
	builder.WriteString("User(")
	builder.WriteString(fmt.Sprintf("id=%v, ", u.ID))
	if v := u.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("username=")
	builder.WriteString(u.Username)
	builder.WriteString(", ")
	if v := u.Email; v != nil {
		builder.WriteString("email=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("password=<sensitive>")
	builder.WriteString(", ")
	builder.WriteString("attr=")
	builder.WriteString(fmt.Sprintf("%v", u.Attr))
	builder.WriteString(", ")
	if v := u.CreatedAt; v != nil {
		builder.WriteString("created_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := u.UpdatedAt; v != nil {
		builder.WriteString("updated_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// PluckUserID returns the "ID" field value.
func PluckUserID(u *User) uint64 {
	return u.ID
}

// PluckUserDeletedAt returns the "deleted_at" field value.
func PluckUserDeletedAt(u *User) *time.Time {
	return u.DeletedAt
}

// PluckUserUsername returns the "username" field value.
func PluckUserUsername(u *User) string {
	return u.Username
}

// PluckUserEmail returns the "email" field value.
func PluckUserEmail(u *User) *string {
	return u.Email
}

// PluckUserPassword returns the "password" field value.
func PluckUserPassword(u *User) string {
	return u.Password
}

// PluckUserAttr returns the "attr" field value.
func PluckUserAttr(u *User) *map[string]interface{} {
	return u.Attr
}

// PluckUserCreatedAt returns the "created_at" field value.
func PluckUserCreatedAt(u *User) *time.Time {
	return u.CreatedAt
}

// PluckUserUpdatedAt returns the "updated_at" field value.
func PluckUserUpdatedAt(u *User) *time.Time {
	return u.UpdatedAt
}

// Users is a parsable slice of User.
type Users []*User
