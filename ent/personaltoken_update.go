// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/eidng8/go-attr-rbac/ent/personaltoken"
	"github.com/eidng8/go-attr-rbac/ent/predicate"
	"github.com/eidng8/go-attr-rbac/ent/user"
)

// PersonalTokenUpdate is the builder for updating PersonalToken entities.
type PersonalTokenUpdate struct {
	config
	hooks    []Hook
	mutation *PersonalTokenMutation
}

// Where appends a list predicates to the PersonalTokenUpdate builder.
func (ptu *PersonalTokenUpdate) Where(ps ...predicate.PersonalToken) *PersonalTokenUpdate {
	ptu.mutation.Where(ps...)
	return ptu
}

// SetDescription sets the "description" field.
func (ptu *PersonalTokenUpdate) SetDescription(s string) *PersonalTokenUpdate {
	ptu.mutation.SetDescription(s)
	return ptu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ptu *PersonalTokenUpdate) SetNillableDescription(s *string) *PersonalTokenUpdate {
	if s != nil {
		ptu.SetDescription(*s)
	}
	return ptu
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (ptu *PersonalTokenUpdate) SetOwnerID(id uint64) *PersonalTokenUpdate {
	ptu.mutation.SetOwnerID(id)
	return ptu
}

// SetNillableOwnerID sets the "owner" edge to the User entity by ID if the given value is not nil.
func (ptu *PersonalTokenUpdate) SetNillableOwnerID(id *uint64) *PersonalTokenUpdate {
	if id != nil {
		ptu = ptu.SetOwnerID(*id)
	}
	return ptu
}

// SetOwner sets the "owner" edge to the User entity.
func (ptu *PersonalTokenUpdate) SetOwner(u *User) *PersonalTokenUpdate {
	return ptu.SetOwnerID(u.ID)
}

// Mutation returns the PersonalTokenMutation object of the builder.
func (ptu *PersonalTokenUpdate) Mutation() *PersonalTokenMutation {
	return ptu.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (ptu *PersonalTokenUpdate) ClearOwner() *PersonalTokenUpdate {
	ptu.mutation.ClearOwner()
	return ptu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ptu *PersonalTokenUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ptu.sqlSave, ptu.mutation, ptu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ptu *PersonalTokenUpdate) SaveX(ctx context.Context) int {
	affected, err := ptu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ptu *PersonalTokenUpdate) Exec(ctx context.Context) error {
	_, err := ptu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ptu *PersonalTokenUpdate) ExecX(ctx context.Context) {
	if err := ptu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ptu *PersonalTokenUpdate) check() error {
	if v, ok := ptu.mutation.Description(); ok {
		if err := personaltoken.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "PersonalToken.description": %w`, err)}
		}
	}
	return nil
}

func (ptu *PersonalTokenUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ptu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(personaltoken.Table, personaltoken.Columns, sqlgraph.NewFieldSpec(personaltoken.FieldID, field.TypeUint64))
	if ps := ptu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ptu.mutation.Description(); ok {
		_spec.SetField(personaltoken.FieldDescription, field.TypeString, value)
	}
	if ptu.mutation.CreatedAtCleared() {
		_spec.ClearField(personaltoken.FieldCreatedAt, field.TypeTime)
	}
	if ptu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   personaltoken.OwnerTable,
			Columns: []string{personaltoken.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ptu.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   personaltoken.OwnerTable,
			Columns: []string{personaltoken.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ptu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{personaltoken.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ptu.mutation.done = true
	return n, nil
}

// PersonalTokenUpdateOne is the builder for updating a single PersonalToken entity.
type PersonalTokenUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PersonalTokenMutation
}

// SetDescription sets the "description" field.
func (ptuo *PersonalTokenUpdateOne) SetDescription(s string) *PersonalTokenUpdateOne {
	ptuo.mutation.SetDescription(s)
	return ptuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ptuo *PersonalTokenUpdateOne) SetNillableDescription(s *string) *PersonalTokenUpdateOne {
	if s != nil {
		ptuo.SetDescription(*s)
	}
	return ptuo
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (ptuo *PersonalTokenUpdateOne) SetOwnerID(id uint64) *PersonalTokenUpdateOne {
	ptuo.mutation.SetOwnerID(id)
	return ptuo
}

// SetNillableOwnerID sets the "owner" edge to the User entity by ID if the given value is not nil.
func (ptuo *PersonalTokenUpdateOne) SetNillableOwnerID(id *uint64) *PersonalTokenUpdateOne {
	if id != nil {
		ptuo = ptuo.SetOwnerID(*id)
	}
	return ptuo
}

// SetOwner sets the "owner" edge to the User entity.
func (ptuo *PersonalTokenUpdateOne) SetOwner(u *User) *PersonalTokenUpdateOne {
	return ptuo.SetOwnerID(u.ID)
}

// Mutation returns the PersonalTokenMutation object of the builder.
func (ptuo *PersonalTokenUpdateOne) Mutation() *PersonalTokenMutation {
	return ptuo.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (ptuo *PersonalTokenUpdateOne) ClearOwner() *PersonalTokenUpdateOne {
	ptuo.mutation.ClearOwner()
	return ptuo
}

// Where appends a list predicates to the PersonalTokenUpdate builder.
func (ptuo *PersonalTokenUpdateOne) Where(ps ...predicate.PersonalToken) *PersonalTokenUpdateOne {
	ptuo.mutation.Where(ps...)
	return ptuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ptuo *PersonalTokenUpdateOne) Select(field string, fields ...string) *PersonalTokenUpdateOne {
	ptuo.fields = append([]string{field}, fields...)
	return ptuo
}

// Save executes the query and returns the updated PersonalToken entity.
func (ptuo *PersonalTokenUpdateOne) Save(ctx context.Context) (*PersonalToken, error) {
	return withHooks(ctx, ptuo.sqlSave, ptuo.mutation, ptuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ptuo *PersonalTokenUpdateOne) SaveX(ctx context.Context) *PersonalToken {
	node, err := ptuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ptuo *PersonalTokenUpdateOne) Exec(ctx context.Context) error {
	_, err := ptuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ptuo *PersonalTokenUpdateOne) ExecX(ctx context.Context) {
	if err := ptuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ptuo *PersonalTokenUpdateOne) check() error {
	if v, ok := ptuo.mutation.Description(); ok {
		if err := personaltoken.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "PersonalToken.description": %w`, err)}
		}
	}
	return nil
}

func (ptuo *PersonalTokenUpdateOne) sqlSave(ctx context.Context) (_node *PersonalToken, err error) {
	if err := ptuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(personaltoken.Table, personaltoken.Columns, sqlgraph.NewFieldSpec(personaltoken.FieldID, field.TypeUint64))
	id, ok := ptuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PersonalToken.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ptuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, personaltoken.FieldID)
		for _, f := range fields {
			if !personaltoken.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != personaltoken.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ptuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ptuo.mutation.Description(); ok {
		_spec.SetField(personaltoken.FieldDescription, field.TypeString, value)
	}
	if ptuo.mutation.CreatedAtCleared() {
		_spec.ClearField(personaltoken.FieldCreatedAt, field.TypeTime)
	}
	if ptuo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   personaltoken.OwnerTable,
			Columns: []string{personaltoken.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ptuo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   personaltoken.OwnerTable,
			Columns: []string{personaltoken.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &PersonalToken{config: ptuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ptuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{personaltoken.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ptuo.mutation.done = true
	return _node, nil
}
