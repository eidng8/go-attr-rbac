// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/eidng8/go-attr-rbac/ent/personaltoken"
	"github.com/eidng8/go-attr-rbac/ent/user"
)

// Stores issued long-lived tokens
type PersonalToken struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID uint64 `json:"user_id,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Token holds the value of the "token" field.
	Token []byte `json:"-"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PersonalTokenQuery when eager-loading is set.
	Edges                PersonalTokenEdges `json:"-"`
	user_personal_tokens *uint64
	selectValues         sql.SelectValues
}

// PersonalTokenEdges holds the relations/edges for other nodes in the graph.
type PersonalTokenEdges struct {
	// Owner holds the value of the owner edge.
	Owner *User `json:"owner,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PersonalTokenEdges) OwnerOrErr() (*User, error) {
	if e.Owner != nil {
		return e.Owner, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PersonalToken) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case personaltoken.FieldToken:
			values[i] = new([]byte)
		case personaltoken.FieldID, personaltoken.FieldUserID:
			values[i] = new(sql.NullInt64)
		case personaltoken.FieldDescription:
			values[i] = new(sql.NullString)
		case personaltoken.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case personaltoken.ForeignKeys[0]: // user_personal_tokens
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PersonalToken fields.
func (pt *PersonalToken) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case personaltoken.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pt.ID = uint64(value.Int64)
		case personaltoken.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				pt.UserID = uint64(value.Int64)
			}
		case personaltoken.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				pt.Description = value.String
			}
		case personaltoken.FieldToken:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field token", values[i])
			} else if value != nil {
				pt.Token = *value
			}
		case personaltoken.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pt.CreatedAt = new(time.Time)
				*pt.CreatedAt = value.Time
			}
		case personaltoken.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_personal_tokens", value)
			} else if value.Valid {
				pt.user_personal_tokens = new(uint64)
				*pt.user_personal_tokens = uint64(value.Int64)
			}
		default:
			pt.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PersonalToken.
// This includes values selected through modifiers, order, etc.
func (pt *PersonalToken) Value(name string) (ent.Value, error) {
	return pt.selectValues.Get(name)
}

// QueryOwner queries the "owner" edge of the PersonalToken entity.
func (pt *PersonalToken) QueryOwner() *UserQuery {
	return NewPersonalTokenClient(pt.config).QueryOwner(pt)
}

// Update returns a builder for updating this PersonalToken.
// Note that you need to call PersonalToken.Unwrap() before calling this method if this PersonalToken
// was returned from a transaction, and the transaction was committed or rolled back.
func (pt *PersonalToken) Update() *PersonalTokenUpdateOne {
	return NewPersonalTokenClient(pt.config).UpdateOne(pt)
}

// Unwrap unwraps the PersonalToken entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pt *PersonalToken) Unwrap() *PersonalToken {
	_tx, ok := pt.config.driver.(*txDriver)
	if !ok {
		panic("ent: PersonalToken is not a transactional entity")
	}
	pt.config.driver = _tx.drv
	return pt
}

// String implements the fmt.Stringer.
func (pt *PersonalToken) String() string {
	var builder strings.Builder
	builder.WriteString("PersonalToken(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pt.ID))
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", pt.UserID))
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(pt.Description)
	builder.WriteString(", ")
	builder.WriteString("token=<sensitive>")
	builder.WriteString(", ")
	if v := pt.CreatedAt; v != nil {
		builder.WriteString("created_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// PluckPersonalTokenID returns the "ID" field value.
func PluckPersonalTokenID(pt *PersonalToken) uint64 {
	return pt.ID
}

// PluckPersonalTokenUserID returns the "user_id" field value.
func PluckPersonalTokenUserID(pt *PersonalToken) uint64 {
	return pt.UserID
}

// PluckPersonalTokenDescription returns the "description" field value.
func PluckPersonalTokenDescription(pt *PersonalToken) string {
	return pt.Description
}

// PluckPersonalTokenToken returns the "token" field value.
func PluckPersonalTokenToken(pt *PersonalToken) []byte {
	return pt.Token
}

// PluckPersonalTokenCreatedAt returns the "created_at" field value.
func PluckPersonalTokenCreatedAt(pt *PersonalToken) *time.Time {
	return pt.CreatedAt
}

// PersonalTokens is a parsable slice of PersonalToken.
type PersonalTokens []*PersonalToken
